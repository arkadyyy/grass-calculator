[{"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js":"2","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js":"3","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Home.js":"4","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\chiburCalc.js":"5","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\PchatWithDirection.js":"6","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburNoDirection.js":"7","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburWithDirection.js":"8","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\ControlledTabs.js":"9","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js":"10"},{"size":517,"mtime":1608723026989,"results":"11","hashOfConfig":"12"},{"size":382,"mtime":1609317537292,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1608723026991,"results":"14","hashOfConfig":"12"},{"size":16221,"mtime":1611162320950,"results":"15","hashOfConfig":"12"},{"size":3290,"mtime":1609873612945,"results":"16","hashOfConfig":"12"},{"size":774,"mtime":1609237840498,"results":"17","hashOfConfig":"12"},{"size":699,"mtime":1609249269110,"results":"18","hashOfConfig":"12"},{"size":718,"mtime":1610269867193,"results":"19","hashOfConfig":"12"},{"size":32548,"mtime":1611162321009,"results":"20","hashOfConfig":"12"},{"size":25083,"mtime":1611082857516,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"hmzdfx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js",[],["46","47"],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Home.js",["48","49","50","51","52","53","54","55","56","57"],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\chiburCalc.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\PchatWithDirection.js",["58","59","60","61"],"function PchatWithDirection(arrX, arrY) {\r\n  let resultX = arrX.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n  let resultY = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n\r\n  if (resultX === resultY) {\r\n    let resultXConnections = arrX.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n      \r\n    }, 0);\r\n\r\n    let resultYConnections = arrY.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n    }, 0);\r\n\r\n    if (resultXConnections >= resultYConnections) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  } else {\r\n    if (resultX > resultY) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PchatWithDirection;\r\n","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburWithDirection.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\ControlledTabs.js",["62","63","64","65","66","67","68","69","70","71"],"import \"../App.css\";\r\nimport Konva from \"../components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  Form,\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nexport default function ControlledTabs({\r\n  summary,\r\n  squares,\r\n  setsquares,\r\n  x_directionResultForClient,\r\n  y_directionResultForClient,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) {\r\n  const [key, setKey] = useState(\r\n    \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\"\r\n  );\r\n  const [perutTitle, setPerutTitle] = useState(\r\n    \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\"\r\n  );\r\n  const [arrayUsed, setArratUsed] = useState(resultMinChiburWithDirection);\r\n\r\n  useEffect(() => {\r\n    if (key === \"מינימום פחת\") {\r\n      setArratUsed(resultForClientPchat);\r\n    } else if (key === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setArratUsed(resultPchatWithDirection);\r\n    } else if (key === \"מינימום חיבורים\") {\r\n      setArratUsed(resultMinChiburNoDirection);\r\n    } else if (key === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setArratUsed(resultMinChiburWithDirection);\r\n    }\r\n  }, [key]);\r\n\r\n  return (\r\n    <>\r\n      <Tabs\r\n        className='tabs'\r\n        id='controlled-tab'\r\n        activeKey={key}\r\n        onSelect={(k) => (setKey(k), setPerutTitle(k))}\r\n      >\r\n        {Object.entries(summary).map(([objKey, value], i) => (\r\n          // {/* <Tab eventKey=\"מינימום פחת + כיוון סיב אחיד\" title= \"מינימום פחת + כיוון סיב אחיד\"> */}\r\n          <Tab eventKey={value.title} title={value.title}>\r\n            {/* <Container style={{ textAlign: \"right\", display:\"flex\", flexDirection:\"column\", alignItems:\"center\"}}> */}\r\n            <Row style={{ direction: \"rtl\", margin: \"0 20px\" }}>\r\n              <h2> סה\"כ להזמנה </h2>{\" \"}\r\n              <h3> (לצפיה בפירוט יש לגלול לתחתית המסך) </h3>\r\n              <Card\r\n                className='mr-5 mt-5 '\r\n                border='secondary'\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <Card.Body>\r\n                  <Row md={12}>\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> גלילים ברוחב 2 מטר</strong> <hr></hr>\r\n                        {value.opt2 > 25 ? (\r\n                          <>\r\n<<<<<<< HEAD\r\n                              <p> סהכ אורך:{value.opt4length.toFixed(2)} מטר.</p>\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt2length / 25)} גלילים.</p>\r\n                            {value.opt2length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {value.opt2* value.opt2length % 25} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                     \r\n                        ) : \r\n                        // value.opt2 * value.opt2length >= 25  ? (\r\n                          // <>\r\n                       \r\n                          // <p>כמות גלילים באורך 25 מטר:  {Math.floor(value.opt2 * value.opt2length / 25)}</p>\r\n\r\n                          // {value.opt2 * value.opt2length % 25?(\r\n                          //   <>\r\n                          //   <p>ובנוסף גליל באורך {value.opt2 * value.opt2length % 25} </p>\r\n                          //   </>\r\n                          //   ):null}\r\n                              \r\n                          //   </>) :\r\n                             <>\r\n                             <p>כמות:{value.opt2} גלילים.</p>\r\n                          <p> באורך: {value.opt2length} מטר. </p>\r\n=======\r\n                            <p>\r\n                              {\" \"}\r\n                              כמות גלילים באורך 25 מטר:{\" \"}\r\n                              {Math.floor(value.opt2length / 25)}{\" \"}\r\n                            </p>\r\n                            {value.opt2length % 25 ? (\r\n                              <p>\r\n                                ובנוסף גליל באורך{\" \"}\r\n                                {(value.opt2 * value.opt2length) % 25}{\" \"}\r\n                              </p>\r\n                            ) : null}\r\n                          </>\r\n                        ) : value.opt2 * value.opt2length >= 25 ? (\r\n                          <>\r\n                            <p>\r\n                              כמות גלילים באורך 25 מטר:{\" \"}\r\n                              {Math.floor((value.opt2 * value.opt2length) / 25)}\r\n                            </p>\r\n\r\n                            {(value.opt2 * value.opt2length) % 25 ? (\r\n                              <>\r\n                                <p>\r\n                                  ובנוסף גליל באורך{\" \"}\r\n                                  {(value.opt2 * value.opt2length) % 25}{\" \"}\r\n                                </p>\r\n                              </>\r\n                            ) : null}\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <p>כמות:{value.opt2}</p>\r\n                            <p> באורך: {value.opt2length} מטר </p>\r\n                          </>\r\n                        )}\r\n                        {value.opt2 ? <br></br> : null}\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> גלילים ברוחב 3 מטר</strong> <hr></hr>\r\n                        {value.opt3 > 25 ? (\r\n                          <>\r\n<<<<<<< HEAD\r\n                                              \r\n                                              <p> סהכ אורך:{value.opt3length.toFixed(2)} מטר.</p>\r\n\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt3length / 25)} גלילים.</p>\r\n                            {value.opt3length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {value.opt3* value.opt3length % 25} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                     \r\n                        ) : \r\n                        // value.opt3 * value.opt3length >= 25  ? (\r\n                        //   <>\r\n                       \r\n                        //   <p>כמות גלילים באורך 25 מטר:  {Math.floor(value.opt3 * value.opt3length / 25)}</p>\r\n\r\n                        //   {value.opt3 * value.opt3length % 25?(\r\n                        //     <>\r\n                        //     <p>ובנוסף גליל באורך {value.opt3 * value.opt3length % 25} </p>\r\n                        //     </>\r\n                        //     ):null}\r\n                              \r\n                        //     </>) : \r\n                            <>\r\n                            <p>כמות:{value.opt3} גלילים.</p>\r\n                         <p> באורך: {value.opt3length} מטר. </p>\r\n                         </>}\r\n                          \r\n                                                                                                  \r\n                         {value.opt3 ? <br></br> : null}\r\n=======\r\n                            <p>\r\n                              {\" \"}\r\n                              כמות גלילים באורך 25 מטר:{\" \"}\r\n                              {Math.floor(value.opt3length / 25)}{\" \"}\r\n                            </p>\r\n                            {value.opt3length % 25 ? (\r\n                              <p>\r\n                                ובנוסף גליל באורך{\" \"}\r\n                                {(value.opt3 * value.opt3length) % 25}{\" \"}\r\n                              </p>\r\n                            ) : null}\r\n                          </>\r\n                        ) : value.opt3 * value.opt3length >= 25 ? (\r\n                          <>\r\n                            <p>\r\n                              כמות גלילים באורך 25 מטר:{\" \"}\r\n                              {Math.floor((value.opt3 * value.opt3length) / 25)}\r\n                            </p>\r\n\r\n                            {(value.opt3 * value.opt3length) % 25 ? (\r\n                              <>\r\n                                <p>\r\n                                  ובנוסף גליל באורך{\" \"}\r\n                                  {(value.opt3 * value.opt3length) % 25}{\" \"}\r\n                                </p>\r\n                              </>\r\n                            ) : null}\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <p>כמות:{value.opt3}</p>\r\n                            <p> באורך: {value.opt3length} מטר </p>\r\n                          </>\r\n                        )}\r\n                        {value.opt3 ? <br></br> : null}\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <>\r\n                          <strong> גלילים ברוחב 4 מטר</strong> <hr></hr>\r\n                        </>\r\n                        <p>{\"opt4\" + value.opt4length}</p>\r\n                        <p>{\"opt3\" + value.opt3length}</p>\r\n                        <p>{\"opt2\" + value.opt2length}</p>\r\n\r\n                        {value.opt4length > 25 ? (\r\n                          <>\r\n<<<<<<< HEAD\r\n                                              \r\n                                              <p> סהכ אורך:   {value.opt4length.toFixed(2)} מטר.</p>\r\n\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt4length / 25)} גלילים.</p>\r\n                            {value.opt4length % 25 ? (\r\n                              <p>ובנוסף גליל  {(value.opt4length % 25).toFixed(2)} מטר.</p>\r\n\r\n=======\r\n                            <p> סהכ אורך: {value.opt4length} </p>\r\n\r\n                            <p>\r\n                              {\" \"}\r\n                              כמות גלילים באורך 25 מטר:{\" \"}\r\n                              {Math.floor(value.opt4length / 25)}{\" \"}\r\n                            </p>\r\n                            {value.opt4length % 25 ? (\r\n                              <p>ובנוסף גליל באורך {value.opt4length % 25} </p>\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n                            ) : null}\r\n                          </>\r\n                        ) : (\r\n                          // value.opt4 * value.opt4length >= 25 ? (                            // console.log('value:', value)\r\n                          // <>\r\n                          //     {console.log('valueOpt4length:', value.opt4length)}\r\n                          //     {console.log('valueOpt4:', value.opt4)}\r\n\r\n                          // <p>כמות גלילים באורך 25 מטר:  {Math.floor(value.opt4 * value.opt4length / 25)}</p>\r\n\r\n                          // {value.opt4 * value.opt4length % 25?(\r\n                          //   <>\r\n                          //   <p>ובנוסף גליל באורך {value.opt4 * value.opt4length % 25} </p>\r\n                          //   </>\r\n                          //   ):null}\r\n<<<<<<< HEAD\r\n                              \r\n                          // </>) : \r\n                            <>\r\n                          <p>כמות:{value.opt4} גלילים.</p>\r\n                       <p> באורך: {value.opt4length} מטר. </p>\r\n                       </>\r\n                              }\r\n                          \r\n                                                                                                  \r\n                         {value.opt4 ? <br></br> : null}\r\n=======\r\n\r\n                          // </>) :\r\n                          <>\r\n                            <p>כמות:{value.opt4}</p>\r\n                            <p> באורך: {value.opt4length} מטר </p>\r\n                          </>\r\n                        )}\r\n\r\n                        {value.opt4 ? <br></br> : null}\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> סה\"כ פחת </strong>\r\n                        <hr></hr>\r\n<<<<<<< HEAD\r\n         {value.pchat>0 ?\r\n                        <span> {(+value.pchat).toFixed(2)} מ\"ר.</span>\r\n                        // <br></br>\r\n                      : <span> אין פחת</span>}\r\n=======\r\n                        {value.pchat > 0 ? (\r\n                          <span> {(+value.pchat).toFixed(2)} מ\"ר</span>\r\n                        ) : (\r\n                          // <br></br>\r\n                          <span> אין פחת</span>\r\n                        )}\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n                      </Card.Text>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Col md={12}>\r\n                <Konva\r\n                  yDirectionSquare={y_directionResultForClient}\r\n                  xDirectionSquare={x_directionResultForClient}\r\n                  resultForClientPchat={resultForClientPchat}\r\n                  resultPchatWithDirection={resultPchatWithDirection}\r\n                  resultMinChiburWithDirection={resultMinChiburWithDirection}\r\n                  resultMinChiburNoDirection={resultMinChiburNoDirection}\r\n                  summary={summary}\r\n                  tabKey={key}\r\n                  squares={squares}\r\n                  setsquares={setsquares}\r\n                  type='bottom'\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {/* </Container> */}\r\n          </Tab>\r\n        ))}\r\n      </Tabs>\r\n\r\n      <h1 className='tabs' style={{ textAlign: \"right\", marginTop: \"40px\" }}>\r\n        פירוט - {perutTitle}\r\n      </h1>\r\n\r\n      {/* {key === \"מינימום פחת\" && ( */}\r\n<<<<<<< HEAD\r\n        <>\r\n          {/* <strong>מינימום פחת-פירוט</strong><br></br> */}\r\n\r\n          <Row className='m-3'>\r\n            {arrayUsed.map((square, index) => {\r\n              return (\r\n                <>\r\n                  <Col md={3} style={{ margin: \"1rem\" }}>\r\n                    <Card\r\n                      border='dark'\r\n                      //  bg={'secondary'}\r\n                      // bg={variant.toLowerCase()}\r\n                      // key={idx}\r\n                      // text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                      text={\"black\"}\r\n                      style={{ width: \"18rem\" }}\r\n                    >\r\n                      <Card.Header style={{ background: `${square.color}` }}>\r\n                        <h1> מלבן מספר {index + 1} </h1>\r\n                        אורך: {square.initialLength}מטר רוחב:\r\n                        {square.initialWidth}מטר\r\n                      </Card.Header>\r\n                      <Card.Text className='perutCardText'>\r\n\r\n                        {square.opt4.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 4 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt4.amount} גלילים.</p>\r\n                            <p>אורך : {square.opt4.length} מטר לכל גליל.</p>\r\n                          </>) : null}\r\n                        \r\n                        \r\n                        \r\n                          {square.opt4.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(square.opt4.length*square.opt4.amount / 25)} גלילים. </p>\r\n                            {square.opt4.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt4.amount * square.opt4.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt4.amount * square.opt4.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n                          <p>{Math.floor(square.opt4.amount * square.opt4.length / 25)}גלילים מלאים(באורך 25 מטר).</p>\r\n=======\r\n      <>\r\n        {/* <strong>מינימום פחת-פירוט</strong><br></br> */}\r\n\r\n        <Row className='m-3'>\r\n          {arrayUsed.map((square, index) => {\r\n            return (\r\n              <>\r\n                <Col md={3} style={{ margin: \"1rem\" }}>\r\n                  <Card\r\n                    border='dark'\r\n                    //  bg={'secondary'}\r\n                    // bg={variant.toLowerCase()}\r\n                    // key={idx}\r\n                    // text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                    text={\"black\"}\r\n                    style={{ width: \"18rem\" }}\r\n                  >\r\n                    <Card.Header style={{ background: `${square.color}` }}>\r\n                      <h1> מלבן מספר {index + 1} </h1>\r\n                      אורך: {square.initialLength}מטר רוחב:\r\n                      {square.initialWidth}מטר\r\n                    </Card.Header>\r\n                    <Card.Text className='perutCardText'>\r\n                      {square.opt4.amount ? (\r\n                        <>\r\n                          <strong> גלילים ברוחב 4 מטר</strong> <hr></hr>\r\n                          <p>כמות : {square.opt4.amount}</p>\r\n                          <p>אורך : {square.opt4.length}</p>\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt4.length > 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n\r\n                          <p>\r\n                            {\" \"}\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(square.opt4.length / 25)}{\" \"}\r\n                          </p>\r\n                          {square.opt4.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {(square.opt4.amount * square.opt4.length) % 25}{\" \"}\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt4.amount * square.opt4.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(\r\n                              (square.opt4.amount * square.opt4.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt4.amount * square.opt4.length) % 25 ? (\r\n                            <>\r\n<<<<<<< HEAD\r\n                            <p>ובנוסף גליל באורך {(square.opt4.amount * square.opt4.length % 25).toFixed(2)} מטר.</p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n                                                                                                  \r\n                         {square.opt4.amount ? <br></br> : null}\r\n\r\n                        \r\n                         {square.opt3.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 3 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt3.amount} מטר.</p>\r\n                            <p>אורך : {square.opt3.length} מטר.</p>\r\n                          </>) : null}\r\n                        \r\n                          \r\n                        {square.opt3.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n\r\n                            <p>   {Math.floor(square.opt3.length*square.opt3.amount / 25)}גלילים מלאים(באורך 25 מטר).</p>\r\n                            {square.opt3.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt3.amount * square.opt3.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt3.amount * square.opt3.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n                          <p> {Math.floor(square.opt3.amount * square.opt3.length / 25)} גלילים מלאים(באורך 25 מטר).</p>\r\n=======\r\n                              <p>\r\n                                ובנוסף גליל באורך{\" \"}\r\n                                {(square.opt4.amount * square.opt4.length) % 25}{\" \"}\r\n                              </p>\r\n                            </>\r\n                          ) : null}\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt4.amount ? <br></br> : null}\r\n\r\n                      {square.opt3.amount ? (\r\n                        <>\r\n                          <strong> גלילים ברוחב 3 מטר</strong> <hr></hr>\r\n                          <p>כמות : {square.opt3.amount}</p>\r\n                          <p>אורך : {square.opt3.length}</p>\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt3.length > 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n\r\n                          <p>\r\n                            {\" \"}\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(square.opt3.length / 25)}{\" \"}\r\n                          </p>\r\n                          {square.opt3.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {(square.opt3.amount * square.opt3.length) % 25}{\" \"}\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt3.amount * square.opt3.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(\r\n                              (square.opt3.amount * square.opt3.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt3.amount * square.opt3.length) % 25 ? (\r\n                            <>\r\n<<<<<<< HEAD\r\n                           \r\n                            <p>ובנוסף גליל באורך {(square.opt3.amount * square.opt3.length % 25).toFixed(2)} מטר. </p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n\r\n                      \r\n                        {square.opt3.amount ? <br></br> : null}\r\n\r\n\r\n\r\n\r\n                        \r\n                        {square.opt2.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 2 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt2.amount} גלילים.</p>\r\n                            <p>אורך : {square.opt2.length} מטר.</p>\r\n                          </>) : null}\r\n                        \r\n                          \r\n                        {square.opt2.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n\r\n                            <p>  {Math.floor(square.opt2.length*square.opt2.amount/ 25)} גלילים מלאים(באורך 25 מטר).</p>\r\n                            {square.opt2.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt2.amount * square.opt2.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt2.amount * square.opt2.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n                          <p>  {Math.floor(square.opt2.amount * square.opt2.length / 25)} מטר.</p>\r\n=======\r\n                              <p>ובנוסף</p>\r\n                              <p>\r\n                                ובנוסף גליל באורך{\" \"}\r\n                                {(square.opt3.amount * square.opt3.length) % 25}{\" \"}\r\n                              </p>\r\n                            </>\r\n                          ) : null}\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt3.amount ? <br></br> : null}\r\n\r\n                      {square.opt2.amount ? (\r\n                        <>\r\n                          <strong> גלילים ברוחב 2 מטר</strong> <hr></hr>\r\n                          <p>כמות : {square.opt2.amount}</p>\r\n                          <p>אורך : {square.opt2.length}</p>\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt2.length > 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n\r\n                          <p>\r\n                            {\" \"}\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(square.opt2.length / 25)}{\" \"}\r\n                          </p>\r\n                          {square.opt2.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {(square.opt2.amount * square.opt2.length) % 25}{\" \"}\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt2.amount * square.opt2.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(\r\n                              (square.opt2.amount * square.opt2.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt2.amount * square.opt2.length) % 25 ? (\r\n                            <>\r\n<<<<<<< HEAD\r\n                             <p>ובנוסף גליל באורך {(square.opt2.amount * square.opt2.length % 25).toFixed(2)} מטר.</p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n\r\n                      \r\n                        {square.opt2.amount ? <br></br> : null}\r\n\r\n\r\n                        \r\n                        {square.pchat ? (\r\n                          <>\r\n                            <strong>\r\n                              פחת<hr></hr>\r\n                            </strong>\r\n                            <p>סה\"כ   {square.pchat} מ\"ר.</p>\r\n                            <hr></hr>\r\n                            {/* <strong>פירוט פחת</strong>  <hr></hr>\r\n                            <>\r\n                              {square.opt4.amount && square.opt4.amount * 4-square.initialWidth-square.opt3.amount * 3-square.opt2.amount * 2 > 0 ? (\r\n                              <p> {square.opt4.length} מטר על {(square.opt4.amount * 4-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</> \r\n                            <>\r\n                            {square.opt3.amount && square.opt3.amount * 3-square.initialWidth-square.opt4.amount * 4-square.opt2.amount * 2 > 0 ? (\r\n                              <p> 3 מטר על {(square.opt3.amount * 3-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</> \r\n                            <>\r\n                            {square.opt2.amount && square.opt2.amount * 2-square.initialWidth-square.opt3.amount * 3-square.opt4.amount * 4 > 0 ? (\r\n                              <p> 2 מטר על {(square.opt2.amount * 2-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</>  */}\r\n                                \r\n                           \r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <strong>\r\n                              אין פחת<hr></hr>\r\n                            </strong>\r\n                          </>\r\n                        )}\r\n                      </Card.Text>\r\n                    </Card>\r\n                  </Col>\r\n                </>\r\n              );\r\n            })}\r\n          </Row>\r\n=======\r\n                              <p>\r\n                                ובנוסף גליל באורך{\" \"}\r\n                                {(square.opt2.amount * square.opt2.length) % 25}{\" \"}\r\n                              </p>\r\n                            </>\r\n                          ) : null}\r\n                        </>\r\n                      ) : null}\r\n\r\n                      {square.opt2.amount ? <br></br> : null}\r\n\r\n                      {square.pchat ? (\r\n                        <>\r\n                          <strong>\r\n                            פחת<hr></hr>\r\n                          </strong>\r\n                          <p>סה\"כ {square.pchat} מ\"ר</p>\r\n                          {/* <p>   {square.initialWidth-}</p>\r\n                              <p>\r\n                                {Math.abs(\r\n                                  +square.initialLength -\r\n                                    +square.opt4.amount * 4 -\r\n                                    +square.opt3.amount * 3\r\n                                ).toFixed(2)}\r\n                            רוחב\r\n                            </p> */}\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <strong>\r\n                            אין פחת<hr></hr>\r\n                          </strong>\r\n                        </>\r\n                      )}\r\n                    </Card.Text>\r\n                  </Card>\r\n                </Col>\r\n              </>\r\n            );\r\n          })}\r\n        </Row>\r\n>>>>>>> 818519fbe1284fb9647f8b54c3dfcdf3e1c390a5\r\n      </>\r\n\r\n      {/* ) */}\r\n      {/* } */}\r\n    </>\r\n  );\r\n}\r\n","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js",["72","73","74"],"import React, { useEffect, useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\r\n\r\nconst Konva = ({\r\n  squares,\r\n  setsquares,\r\n  type,\r\n  tabKey,\r\n  summary,\r\n  xDirectionSquare,\r\n  yDirectionSquare,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) => {\r\n  const [arrayUsed, setarrayUsed] = useState([]);\r\n  const [konvasquares, setkonvasquares] = useState(squares);\r\n  const [isDragging, setisDragging] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultMinChiburWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום פחת\") {\r\n      setarrayUsed(resultForClientPchat);\r\n    }\r\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום חיבורים\") {\r\n      setarrayUsed(resultMinChiburNoDirection);\r\n    }\r\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\r\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\r\n    console.log(\"arrayUsed : \", arrayUsed);\r\n  }, [tabKey]);\r\n\r\n  function testFunc(e) {\r\n    console.log(e.target);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginTop: 30 }}>\r\n        <Stage\r\n          style={{\r\n            border: \"1px solid #333\",\r\n            marginLeft: \"5rem\",\r\n            marginRight: \"5rem\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        >\r\n          <Layer>\r\n            {type === \"top\" &&\r\n              squares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group\r\n                      onDragEnd={(e) => {\r\n                        console.log(e.target.absolutePosition());\r\n                        console.log(e.target);\r\n                        console.log(\"squares : \", squares);\r\n                        let squaresOriginal = [...squares];\r\n                        squaresOriginal[\r\n                          index\r\n                        ][3] = e.target.absolutePosition().x;\r\n                        squaresOriginal[\r\n                          index\r\n                        ][4] = e.target.absolutePosition().y;\r\n                        setkonvasquares(squaresOriginal);\r\n                      }}\r\n                      draggable\r\n                    >\r\n                      <Text\r\n                        offsetX={-70}\r\n                        offsetY={-100}\r\n                        text={` ${square[0]} רוחב`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        rotation={270}\r\n                        offsetX={170}\r\n                        offsetY={-50}\r\n                        text={` ${square[1]} אורך`}\r\n                        fontSize={15}\r\n                      />\r\n\r\n                      <Rect\r\n                        onClick={() => {\r\n                          console.log(isDragging);\r\n                        }}\r\n                        onDragMove={(e) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        onDragStart={(event) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        x={50}\r\n                        y={100}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n            {/* {end of top konva} */}\r\n\r\n            {type === \"bottom\" &&\r\n              konvasquares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                //4 - 140\r\n                //3 - 105\r\n                //2 - 70\r\n                let lineRenderArr = [];\r\n                let numberRenderArr = [];\r\n\r\n                arrayUsed.forEach((square) => {\r\n                  let opt4Amount = +square.opt4.amount;\r\n                  let opt3Amount = +square.opt3.amount;\r\n                  let opt2Amount = +square.opt2.amount;\r\n                  let squareLines = [];\r\n                  let renderedNumbers = [];\r\n\r\n                  while (opt4Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 110\r\n                      );\r\n                    } else {\r\n                      squareLines.push(110);\r\n                    }\r\n                    renderedNumbers.push(4);\r\n                    opt4Amount--;\r\n                  }\r\n                  while (opt3Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 95\r\n                      );\r\n                    } else {\r\n                      squareLines.push(95);\r\n                    }\r\n                    renderedNumbers.push(3);\r\n                    opt3Amount--;\r\n                  }\r\n                  while (opt2Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 30\r\n                      );\r\n                    } else {\r\n                      squareLines.push(30);\r\n                    }\r\n                    renderedNumbers.push(2);\r\n                    opt2Amount--;\r\n                  }\r\n                  console.log(\"lineRenderArr : \", lineRenderArr);\r\n                  lineRenderArr.push(squareLines);\r\n                  numberRenderArr.push(renderedNumbers);\r\n                });\r\n\r\n                lineRenderArr.forEach((arr) => {\r\n                  arr.pop();\r\n                });\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {/* {arrow direction } */}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-30}\r\n                          offsetY={30}\r\n                          points={[0, 45, 0, 70]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetY={-30}\r\n                          points={[30, 0, 50, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-25}\r\n                          offsetY={0}\r\n                          text={`אורך ${square[0]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          rotation={270}\r\n                          offsetX={80}\r\n                          offsetY={0}\r\n                          text={` אורך ${square[1]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n\r\n                      {/* {if arrow direction is vertical} */}\r\n\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Line\r\n                              x={square[3]}\r\n                              y={square[4]}\r\n                              draggable={true}\r\n                              points={[pos, 0, pos, 32]}\r\n                              stroke='darkgreen'\r\n                              strokeWidth='6'\r\n                              dash={[10, 10]}\r\n                            ></Line>\r\n\r\n                            {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                            lineRenderArr[index].length ? (\r\n                              <>\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos - 15\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos) + 1\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                  fill={\"black\"}\r\n                                />\r\n\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos + 50\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n\r\n                                {lineRenderArr[index].forEach((arr) =>\r\n                                  console.log(\"arr : \", arr)\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Text\r\n                                fontStyle='bold'\r\n                                textDecoration='underline'\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                offsetX={\r\n                                  arrayUsed[index].opt4.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt3.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt2.amount > 0\r\n                                    ? -pos + 50\r\n                                    : null\r\n                                }\r\n                                text={\r\n                                  \"גליל\" +\r\n                                  numberRenderArr[index][\r\n                                    lineRenderArr[index].indexOf(pos)\r\n                                  ]\r\n                                }\r\n                                fontSize={15}\r\n                              />\r\n                            )}\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            offsetX={-40}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n\r\n                      {/* {if arrow direction is horizantal} */}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Group>\r\n                              <Line\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                draggable={true}\r\n                                points={[0, pos, 32, pos]}\r\n                                stroke='darkgreen'\r\n                                strokeWidth='6'\r\n                                dash={[10, 10]}\r\n                              ></Line>\r\n                              {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                              lineRenderArr[index].length ? (\r\n                                <>\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos - 60\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos)\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos + 50\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos) + 1\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n                                </>\r\n                              ) : (\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  rotation={270}\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? pos - 70\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n                              )}\r\n                            </Group>\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            // offsetY={-40}\r\n                            offsetX={60}\r\n                            rotationDeg={270}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Rect\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          draggable={true}\r\n                          stroke={square[2]}\r\n                          strokeWidth='4'\r\n                          rotationDeg={132}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      /> */}\r\n                      {/* {if we are in konva bottom use also square for glilim} */}\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 30}\r\n                          height={length[index] * 30}\r\n                          fill='transparent'\r\n                          stroke='darkgreen'\r\n                          draggable={false}\r\n                          strokeWidth='4'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* {the original square from top} */}\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"lineRenderArr : \", lineRenderArr);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={square[3]}\r\n                        y={square[4]}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":8},{"ruleId":"79","severity":1,"message":"83","line":10,"column":3,"nodeType":"81","messageId":"82","endLine":10,"endColumn":7},{"ruleId":"79","severity":1,"message":"84","line":12,"column":3,"nodeType":"81","messageId":"82","endLine":12,"endColumn":6},{"ruleId":"79","severity":1,"message":"85","line":13,"column":3,"nodeType":"81","messageId":"82","endLine":13,"endColumn":6},{"ruleId":"79","severity":1,"message":"86","line":14,"column":3,"nodeType":"81","messageId":"82","endLine":14,"endColumn":7},{"ruleId":"79","severity":1,"message":"87","line":15,"column":3,"nodeType":"81","messageId":"82","endLine":15,"endColumn":6},{"ruleId":"79","severity":1,"message":"88","line":16,"column":3,"nodeType":"81","messageId":"82","endLine":16,"endColumn":14},{"ruleId":"79","severity":1,"message":"89","line":108,"column":10,"nodeType":"81","messageId":"82","endLine":108,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":124,"column":6,"nodeType":"92","endLine":124,"endColumn":15,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"94","line":130,"column":6,"nodeType":"92","endLine":130,"endColumn":34,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":43,"nodeType":"98","messageId":"99","endLine":2,"endColumn":45},{"ruleId":"96","severity":1,"message":"97","line":5,"column":43,"nodeType":"98","messageId":"99","endLine":5,"endColumn":45},{"ruleId":"96","severity":1,"message":"97","line":10,"column":56,"nodeType":"98","messageId":"99","endLine":10,"endColumn":58},{"ruleId":"96","severity":1,"message":"97","line":15,"column":56,"nodeType":"98","messageId":"99","endLine":15,"endColumn":58},{"ruleId":"79","severity":1,"message":"100","line":5,"column":3,"nodeType":"81","messageId":"82","endLine":5,"endColumn":9},{"ruleId":"79","severity":1,"message":"101","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"79","severity":1,"message":"102","line":7,"column":3,"nodeType":"81","messageId":"82","endLine":7,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":8},{"ruleId":"79","severity":1,"message":"103","line":9,"column":3,"nodeType":"81","messageId":"82","endLine":9,"endColumn":7},{"ruleId":"79","severity":1,"message":"104","line":11,"column":3,"nodeType":"81","messageId":"82","endLine":11,"endColumn":12},{"ruleId":"79","severity":1,"message":"88","line":16,"column":3,"nodeType":"81","messageId":"82","endLine":16,"endColumn":14},{"ruleId":"79","severity":1,"message":"105","line":18,"column":21,"nodeType":"81","messageId":"82","endLine":18,"endColumn":36},{"ruleId":"90","severity":1,"message":"106","line":49,"column":7,"nodeType":"92","endLine":49,"endColumn":12,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":58,"column":37,"nodeType":"110","messageId":"111","endLine":58,"endColumn":38},{"ruleId":"90","severity":1,"message":"112","line":37,"column":6,"nodeType":"92","endLine":37,"endColumn":14,"suggestions":"113"},{"ruleId":"79","severity":1,"message":"114","line":39,"column":12,"nodeType":"81","messageId":"82","endLine":39,"endColumn":20},{"ruleId":"115","severity":1,"message":"116","line":554,"column":27,"nodeType":"117","endLine":554,"endColumn":44},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'CardColumns' is defined but never used.","'titleColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection', 'bestMinChiburWithDirection', and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["121"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Button' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'useLayoutEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', and 'resultPchatWithDirection'. Either include them or remove the dependency array. If 'setArratUsed' needs the current value of 'resultForClientPchat', you can also switch to useReducer instead of useState and read 'resultForClientPchat' in the reducer.",["122"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has missing dependencies: 'arrayUsed', 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', 'resultPchatWithDirection', 'xDirectionSquare', and 'yDirectionSquare'. Either include them or remove the dependency array. If 'setarrayUsed' needs the current value of 'resultMinChiburWithDirection', you can also switch to useReducer instead of useState and read 'resultMinChiburWithDirection' in the reducer.",["123"],"'testFunc' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"132","text":"133"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"134","text":"135"},"Update the dependencies array to be: [key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",{"range":"136","text":"137"},"Update the dependencies array to be: [arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",{"range":"138","text":"139"},[3551,3560],"[bestResult, squares, summary]",[3697,3725],"[bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",[1362,1367],"[key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",[1170,1178],"[arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]"]
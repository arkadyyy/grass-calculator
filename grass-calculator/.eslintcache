[{"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js":"2","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js":"3","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Summary.js":"4","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Home.js":"5","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\chiburCalc.js":"6","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\calculator.js":"7","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\PchatWithDirection.js":"8","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburNoDirection.js":"9","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js":"10"},{"size":517,"mtime":1608723026989,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1608723026991,"results":"13","hashOfConfig":"12"},{"size":371,"mtime":1608843890038,"results":"14","hashOfConfig":"12"},{"size":302,"mtime":1608843809404,"results":"15","hashOfConfig":"12"},{"size":12607,"mtime":1609193975036,"results":"16","hashOfConfig":"12"},{"size":2953,"mtime":1609099237256,"results":"17","hashOfConfig":"12"},{"size":1373,"mtime":1608850030037,"results":"18","hashOfConfig":"12"},{"size":751,"mtime":1609063597403,"results":"19","hashOfConfig":"12"},{"size":668,"mtime":1609108794839,"results":"20","hashOfConfig":"12"},{"size":1712,"mtime":1609060768290,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ieg6kk",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js",[],["45","46"],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Summary.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\pages\\Home.js",["47","48","49","50"],"import \"../App.css\";\r\nimport Konva from \"../components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  Form,\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Spinner,\r\n} from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport calculateBestOption from \"../calculator\";\r\nimport ChiburCalc from \"../chiburCalc\";\r\nimport PchatWithDirection from \"../PchatWithDirection\";\r\nimport MinChiburNoDirection from \"../minChiburNoDirection\";\r\n\r\n////////////////////////////////////////////////////////////////////////\r\n\r\nfunction Home({ history }) {\r\n  //all squares entered\r\n  const [squares, setsquares] = useState([]);\r\n\r\n  //best result for client considering pchat only\r\n  const [resultForClientPchat, setresultForClientPchat] = useState([]);\r\n\r\n  //best result for client considering pchat and direction\r\n  const [resultPchatWithDirection, setresultPchatWithDirection] = useState([]);\r\n\r\n  //best result for client considering connections only\r\n  const [resultMinChiburNoDirection, setresultMinChiburNoDirection] = useState(\r\n    []\r\n  );\r\n\r\n  //all x axis results\r\n  const [x_directionResultForClient, setX_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //all y axis results\r\n  const [y_directionResultForClient, setY_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //summary state\r\n\r\n  const [summary, setSummary] = useState({\r\n    minPchatSummary: {\r\n      opt2: 0,\r\n      opt3: 0,\r\n      opt4: 0,\r\n      pchat: 0,\r\n    },\r\n    minChiburNoDirection: {\r\n      opt2: 0,\r\n      opt3: 0,\r\n      opt4: 0,\r\n      pchat: 0,\r\n    },\r\n    minChiburWithDirection: {\r\n      opt2: 0,\r\n      opt3: 0,\r\n      opt4: 0,\r\n      pchat: 0,\r\n    },\r\n  });\r\n\r\n  //input values\r\n  const [width, setwidth] = useState(0);\r\n  const [length, setlength] = useState(0);\r\n\r\n  //squares color\r\n  const [color, setColor] = useState(getRandomColour());\r\n\r\n  function getRandomColour() {\r\n    var red = Math.floor(Math.random() * 255);\r\n    var green = Math.floor(Math.random() * 255);\r\n    var blue = Math.floor(Math.random() * 255);\r\n\r\n    return \"rgb(\" + red + \",\" + green + \",\" + blue + \" )\";\r\n  }\r\n\r\n  const [openSummary, setopenSummary] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"summary changed !\");\r\n  }, [summary]);\r\n\r\n  useEffect(() => {\r\n    bestResult();\r\n    console.log(\"summary : \", summary);\r\n  }, [squares]);\r\n\r\n  useEffect(() => {\r\n    bestResultPchatWithDirection();\r\n    bestMinChiburNoDirection();\r\n  }, [x_directionResultForClient]);\r\n\r\n  function bestMinChiburNoDirection() {\r\n    let result4 = MinChiburNoDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n\r\n    setresultMinChiburNoDirection(result4);\r\n  }\r\n\r\n  function bestResultPchatWithDirection() {\r\n    let result3 = PchatWithDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n\r\n    setresultPchatWithDirection(result3);\r\n  }\r\n\r\n  function summaryAllOptions() {\r\n    let opt2AmountP = 0;\r\n    let opt3AmountP = 0;\r\n    let opt4AmountP = 0;\r\n    let pchatP = 0;\r\n    resultForClientPchat.forEach((square) => {\r\n      opt2AmountP += square.opt2.amount;\r\n      opt3AmountP += square.opt3.amount;\r\n      opt4AmountP += square.opt4.amount;\r\n      pchatP += square.pchat;\r\n    });\r\n\r\n    let opt2AmountPD = 0;\r\n    let opt3AmountPD = 0;\r\n    let opt4AmountPD = 0;\r\n    let pchatPD = 0;\r\n    resultPchatWithDirection.forEach((square) => {\r\n      opt2AmountPD += square.opt2.amount;\r\n      opt3AmountPD += square.opt3.amount;\r\n      opt4AmountPD += square.opt4.amount;\r\n      pchatPD += square.pchat;\r\n    });\r\n\r\n    let opt2AmountC = 0;\r\n    let opt3AmountC = 0;\r\n    let opt4AmountC = 0;\r\n    let pchatC = 0;\r\n    resultMinChiburNoDirection.forEach((square) => {\r\n      opt2AmountC += square.opt2.amount;\r\n      opt3AmountC += square.opt3.amount;\r\n      opt4AmountC += square.opt4.amount;\r\n      pchatC += square.pchat;\r\n    });\r\n\r\n    setSummary({\r\n      ...summary,\r\n      minPchatSummary: {\r\n        opt2: opt2AmountP,\r\n        opt3: opt3AmountP,\r\n        opt4: opt4AmountP,\r\n        pchat: pchatP,\r\n      },\r\n      minChiburNoDirection: {\r\n        opt2: opt2AmountC,\r\n        opt3: opt3AmountC,\r\n        opt4: opt4AmountC,\r\n        pchat: pchatC,\r\n      },\r\n      minChiburWithDirection: {\r\n        opt2: opt2AmountPD,\r\n        opt3: opt3AmountPD,\r\n        opt4: opt4AmountPD,\r\n        pchat: pchatPD,\r\n      },\r\n    });\r\n\r\n    console.log(\"resultForClientPchat : \", resultForClientPchat);\r\n    console.log(\"resultPchatWithDirection : \", resultPchatWithDirection);\r\n    console.log(\"resultMinChiburNoDirection : \", resultMinChiburNoDirection);\r\n  }\r\n\r\n  function bestResult() {\r\n    squares.forEach((square) => {\r\n      //פחת מינימלי\r\n      let result1 = ChiburCalc(square[0] / 100, square[1] / 100);\r\n      let result2 = ChiburCalc(square[1] / 100, square[0] / 100);\r\n      if (result1.pchat === result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else if (result1.pchat < result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else {\r\n        setresultForClientPchat([...resultForClientPchat, result2]);\r\n      }\r\n\r\n      //כיוון פריסה\r\n      setX_DirectionResultForClient([...x_directionResultForClient, result1]);\r\n      setY_DirectionResultForClient([...y_directionResultForClient, result2]);\r\n    });\r\n\r\n    summaryAllOptions();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='App'>\r\n        <Konva squares={squares} setsquares={setsquares} />\r\n\r\n        <InputGroup\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"flex-end\",\r\n          }}\r\n          className='mb-3 p-5'\r\n        >\r\n          <h1>חישוב דשא</h1>\r\n          <Form.Label>\r\n            <strong style={{ textAlign: \"right\" }}>רוחב</strong>\r\n          </Form.Label>\r\n          <FormControl\r\n            placeholder='הכנס רוחב'\r\n            style={{ width: \"35%\", direction: \"rtl\" }}\r\n            aria-label='Default'\r\n            aria-describedby='inputGroup-sizing-default'\r\n            id='width'\r\n            onChange={(e) => {\r\n              setwidth(e.target.value);\r\n            }}\r\n          />\r\n          <Form.Label>\r\n            <strong>אורך</strong>\r\n          </Form.Label>\r\n          <FormControl\r\n            placeholder='הכנס אורך'\r\n            style={{ width: \"35%\", direction: \"rtl\" }}\r\n            aria-label='Default'\r\n            aria-describedby='inputGroup-sizing-default'\r\n            id='length'\r\n            onChange={(e) => {\r\n              setlength(e.target.value);\r\n            }}\r\n          />\r\n          <Form style={{ display: \"flex\" }}>\r\n            {[\"פחת\", \"חיתוכים\", \"כיוון\"].map((type) => (\r\n              <div\r\n                style={{\r\n                  direction: \"rtl\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  margin: \" 1rem 0.3rem\",\r\n                }}\r\n                key={`checkbox`}\r\n                className='mb-3'\r\n              >\r\n                <Form.Label>\r\n                  <strong>{type}</strong>\r\n                </Form.Label>\r\n                <Form.Check type='checkbox' id={`default-${type}`} />\r\n              </div>\r\n            ))}\r\n          </Form>\r\n          <div className='buttons'>\r\n            <Button\r\n              onClick={() => {\r\n                setColor(getRandomColour());\r\n                setsquares([...squares, [+width, +length, color]]);\r\n                console.log(width);\r\n                console.log(length);\r\n                setwidth(0);\r\n                setlength(0);\r\n                summaryAllOptions();\r\n              }}\r\n              className='m-3'\r\n              variant='success'\r\n            >\r\n              הוסף מלבן\r\n            </Button>\r\n            <Button\r\n              className='m-3'\r\n              variant='success'\r\n              onClick={() => {\r\n                setopenSummary(true);\r\n\r\n                summaryAllOptions();\r\n              }}\r\n            >\r\n              חשב\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setsquares([]);\r\n                setresultForClientPchat([]);\r\n\r\n                setwidth(0);\r\n                setlength(0);\r\n              }}\r\n              className='m-3'\r\n              variant='success'\r\n            >\r\n              נקה\r\n            </Button>\r\n          </div>\r\n        </InputGroup>\r\n      </div>\r\n      <hr></hr>\r\n\r\n      {openSummary && (\r\n        <div className='summary'>\r\n          <Spinner animation='border' variant='success' size='xl' />\r\n          <h3>אלו התוצאות שמצאנו עבורך </h3>\r\n          <Container>\r\n            <Row>\r\n              <Col>\r\n                <Card border='secondary' style={{ width: \"18rem\" }}>\r\n                  <Card.Header>חישוב ע\"פ מינימום פחת</Card.Header>\r\n                  {resultForClientPchat.map((square, index) => {\r\n                    return (\r\n                      <>\r\n                        <Card.Body>\r\n                          <Card.Title>מרובע {index + 1}</Card.Title>\r\n                          <Card.Text>\r\n                            <hr></hr>\r\n                            משטח 4מ {square.opt4.amount}\r\n                            באורך {square.opt4.length}\r\n                            <br></br>\r\n                            משטח 3מ {square.opt3.amount}\r\n                            באורך {square.opt3.length}\r\n                            <br></br>\r\n                            משטח 2מ {square.opt2.amount}\r\n                            באורך {square.opt2.length}\r\n                            <br></br>\r\n                          </Card.Text>\r\n                        </Card.Body>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </Card>\r\n              </Col>\r\n              <Col>\r\n                <Card border='secondary' style={{ width: \"18rem\" }}>\r\n                  <Card.Header>חישוב ע\"פ מינימום חיבורים</Card.Header>\r\n                  {resultMinChiburNoDirection.map((square, index) => (\r\n                    <>\r\n                      <Card.Body>\r\n                        <Card.Title>מרובע {index + 1}</Card.Title>\r\n                        <Card.Text>\r\n                          משטח 4מ {square.opt4.amount}\r\n                          באורך {square.opt4.length}\r\n                          <br></br>\r\n                          משטח 3מ {square.opt3.amount}\r\n                          באורך {square.opt3.length}\r\n                          <br></br>\r\n                          משטח 2מ {square.opt2.amount}\r\n                          באורך {square.opt2.length}\r\n                          <br></br>\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </>\r\n                  ))}\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Card\r\n                  className='my-5'\r\n                  border='secondary'\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {Object.entries(summary).map(([key, value], i) => (\r\n                    <>\r\n                      <Card.Header>enteries {i}</Card.Header>\r\n\r\n                      <Card.Body>\r\n                        <Card.Title>{key}</Card.Title>\r\n                        <Card.Text>\r\n                          opt2 : {value.opt2}\r\n                          <br></br>\r\n                          opt3 : {value.opt3}\r\n                          <br></br>\r\n                          opt4 : {value.opt4}\r\n                          <br></br>\r\n                          pchat : {value.pchat}\r\n                          <br></br>\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </>\r\n                  ))}\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// const [summary, setSummary] = useState({\r\n//   minPchatSummary: {\r\n//     opt2: 0,\r\n//     opt3: 0,\r\n//     opt4: 0,\r\n//     pchat: 0,\r\n//   },\r\n//   minChiburNoDirection: {\r\n//     opt2: 0,\r\n//     opt3: 0,\r\n//     opt4: 0,\r\n//     pchat: 0,\r\n//   },\r\n//   minChiburWithDirection: {\r\n//     opt2: 0,\r\n//     opt3: 0,\r\n//     opt4: 0,\r\n//     pchat: 0,\r\n//   },\r\n// });\r\n\r\nexport default Home;","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\chiburCalc.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\calculator.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\PchatWithDirection.js",["51","52","53","54"],"function PchatWithDirection(arrX, arrY) {\r\n  let resultX = arrX.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n  let resultY = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n\r\n  if (resultX === resultY) {\r\n    let resultXConnections = arrX.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n      \r\n    }, 0);\r\n\r\n   let resultYConnections = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n    }, 0);\r\n\r\n    if (resultXConnections >= resultYConnections) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  } else if (resultX > resultY) {\r\n    return arrY;\r\n  } else {\r\n    return arrX;\r\n  }\r\n}\r\n\r\nexport default PchatWithDirection;\r\n","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":8,"column":3,"nodeType":"61","messageId":"62","endLine":8,"endColumn":8},{"ruleId":"59","severity":1,"message":"63","line":17,"column":8,"nodeType":"61","messageId":"62","endLine":17,"endColumn":27},{"ruleId":"64","severity":1,"message":"65","line":96,"column":6,"nodeType":"66","endLine":96,"endColumn":15,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":101,"column":6,"nodeType":"66","endLine":101,"endColumn":34,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":43,"nodeType":"72","messageId":"73","endLine":2,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":5,"column":43,"nodeType":"72","messageId":"73","endLine":5,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":10,"column":56,"nodeType":"72","messageId":"73","endLine":10,"endColumn":58},{"ruleId":"70","severity":1,"message":"71","line":15,"column":55,"nodeType":"72","messageId":"73","endLine":15,"endColumn":57},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'calculateBestOption' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection' and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["77"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"82","text":"83"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"84","text":"85"},[2399,2408],"[bestResult, squares, summary]",[2510,2538],"[bestMinChiburNoDirection, bestResultPchatWithDirection, x_directionResultForClient]"]
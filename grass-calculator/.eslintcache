[{"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js":"2","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js":"3","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\calculator.js":"4","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js":"5"},{"size":517,"mtime":1608723026989,"results":"6","hashOfConfig":"7"},{"size":375,"mtime":1608723026991,"results":"8","hashOfConfig":"7"},{"size":8707,"mtime":1608802782269,"results":"9","hashOfConfig":"7"},{"size":1436,"mtime":1608723026986,"results":"10","hashOfConfig":"7"},{"size":1293,"mtime":1608723026987,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ieg6kk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\index.js",[],["26","27"],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\App.js",["28","29"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Konva from \"./components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, InputGroup, FormControl, Modal, Form } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport calculateBestOption from \"./calculator\";\r\n\r\nfunction App() {\r\n  const [squares, setsquares] = useState([]);\r\n  const [resultForClient, setresultForClient] = useState([]);\r\n  const [x_directionResultForClient, setX_DirectionResultForClient] = useState([]);\r\n  const [y_directionResultForClient, setY_DirectionResultForClient] = useState([]);\r\n\r\n  const [width, setwidth] = useState(0);\r\n  const [length, setlength] = useState(0);\r\n\r\n  //modal state\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  useEffect(() => {\r\n    bestResult();\r\n  }, [squares]);\r\n\r\n  function bestResult() {\r\n    squares.forEach((square) => {\r\n      let result1 = calculateBestOption(square[0] / 100, square[1] / 100);\r\n      let result2 = calculateBestOption(square[1] / 100, square[0] / 100);\r\n\r\n      if (result1.pchat === result2.pchat) {\r\n        setresultForClient([...resultForClient, result1]);\r\n      } else if (result1.pchat < result2.pchat) {\r\n        setresultForClient([...resultForClient, result1]);\r\n      } else {\r\n        setresultForClient([...resultForClient, result2]);\r\n      }\r\n\r\n      setX_DirectionResultForClient([...x_directionResultForClient,result1])\r\n      setY_DirectionResultForClient([...y_directionResultForClient,result2])\r\n\r\n      console.log(\"result1:\",result1);\r\n      console.log(\"result2:\",result2);\r\n      console.log(\"resultForClient:\", resultForClient);\r\n      console.log(\"x result:\",x_directionResultForClient);\r\n      console.log(\"y result:\",y_directionResultForClient);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Konva squares={squares} setsquares={setsquares} />\r\n\r\n      <InputGroup\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"flex-end\",\r\n        }}\r\n        className='mb-3 p-5'\r\n      >\r\n        <h1>חישוב דשא</h1>\r\n        <Form.Label>\r\n          <strong style={{ textAlign: \"right\" }}>רוחב</strong>\r\n        </Form.Label>\r\n        <FormControl\r\n          placeholder='הכנס רוחב'\r\n          style={{ width: \"35%\", direction: \"rtl\" }}\r\n          aria-label='Default'\r\n          aria-describedby='inputGroup-sizing-default'\r\n          id='width'\r\n          onChange={(e) => {\r\n            setwidth(e.target.value);\r\n          }}\r\n        />\r\n        <Form.Label>\r\n          <strong>אורך</strong>\r\n        </Form.Label>\r\n        <FormControl\r\n          placeholder='הכנס אורך'\r\n          style={{ width: \"35%\", direction: \"rtl\" }}\r\n          aria-label='Default'\r\n          aria-describedby='inputGroup-sizing-default'\r\n          id='length'\r\n          onChange={(e) => {\r\n            setlength(e.target.value);\r\n          }}\r\n        />\r\n        <div className='buttons'>\r\n          <Button\r\n            onClick={() => {\r\n              setsquares([...squares, [+width, +length]]);\r\n              console.log(width);\r\n              console.log(length);\r\n              setwidth(0);\r\n              setlength(0);\r\n            }}\r\n            className='m-3'\r\n            variant='success'\r\n          >\r\n            הוסף מלבן\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              // console.log(squares);\r\n\r\n              handleShow();\r\n            }}\r\n            className='m-3'\r\n            variant='success'\r\n          >\r\n            חשב\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setsquares([]);\r\n              setresultForClient([]);\r\n              setwidth(0);\r\n              setlength(0);\r\n            }}\r\n            className='m-3'\r\n            variant='success'\r\n          >\r\n            נקה\r\n          </Button>\r\n        </div>\r\n      </InputGroup>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>תוצאת חישוב</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>מצאנו לך את ההזמנה המומלצת</p>\r\n          <p>פחת מינימלי</p>\r\n          {resultForClient.map((result, index) => (\r\n            <>\r\n              <hr></hr>\r\n              <p>\r\n                <strong> {`תוצאה למלבן ${index + 1}`}</strong>\r\n              </p>\r\n\r\n              {result.opt4.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 4מ ${result.opt4.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt4.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt3.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 3מ ${result.opt3.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt3.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt2.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 2מ ${result.opt2.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt2.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              <p>{`פחת ${result.pchat}`}</p>\r\n            </>\r\n          ))}\r\n          <p>חישוב לפי כיוון פריסה אחיד אפשרות 1  </p>\r\n          {x_directionResultForClient.map((result, index) => (\r\n            <>\r\n              <hr></hr>\r\n              <p>\r\n                <strong> {`תוצאה למלבן ${index + 1}`}</strong>\r\n              </p>\r\n\r\n              {result.opt4.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 4מ ${result.opt4.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt4.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt3.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 3מ ${result.opt3.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt3.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt2.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 2מ ${result.opt2.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt2.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              <p>{`פחת ${result.pchat}`}</p>\r\n            </>\r\n          ))}\r\n          <p>חישוב לפי כיוון פריסה אחיד אפשרות 2  </p>\r\n          {x_directionResultForClient.map((result, index) => (\r\n            <>\r\n              <hr></hr>\r\n              <p>\r\n                <strong> {`תוצאה למלבן ${index + 1}`}</strong>\r\n              </p>\r\n\r\n              {result.opt4.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 4מ ${result.opt4.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt4.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt3.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 3מ ${result.opt3.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt3.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              {result.opt2.amount >= 1 ? (\r\n                <>\r\n                  <p>{`משטח 2מ ${result.opt2.amount}`}</p>\r\n                  <p>{<p>{`באורך ${result.opt2.length}`}</p>}</p>\r\n                </>\r\n              ) : null}\r\n\r\n              <p>{`פחת ${result.pchat}`}</p>\r\n            </>\r\n          ))}\r\n\r\n          {/* {sumResultForClient.opt2.width >= 1 ? (\r\n            <>\r\n              <p> משטח ברוחב 2 מטר</p>\r\n              <p> {sumResultForClient.opt2.length} : באורך </p>\r\n            </>\r\n          ) : null}\r\n          {sumResultForClient.opt3.width >= 1 ? (\r\n            <>\r\n              <p> משטח ברוחב 3 מטר</p>\r\n              <p> {sumResultForClient.opt3.length} : באורך </p>\r\n            </>\r\n          ) : null}\r\n          {sumResultForClient.opt4.width >= 1 ? (\r\n            <>\r\n              <p> משטח ברוחב 4 מטר </p>\r\n              <p> {sumResultForClient.opt4.length} : באורך </p>\r\n            </>\r\n          ) : null} */}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            חזור ללוח השרטוטים\r\n          </Button>\r\n          <Button variant='primary' onClick={handleClose}>\r\n            הזמן\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\fullstack\\grass-calculator\\grass-calculator\\src\\calculator.js",[],"C:\\fullstack\\grass-calculator\\grass-calculator\\src\\components\\Konva.js",["30","31","32","33"],"import React from \"react\";\r\nimport {\r\n  Stage,\r\n  Layer,\r\n  Rect,\r\n  Text,\r\n  Circle,\r\n  Line,\r\n  Label,\r\n  Tag,\r\n  Group,\r\n} from \"react-konva\";\r\n\r\nconst Konva = ({ squares }) => {\r\n  return (\r\n    <>\r\n      <div style={{ width: \"65%\" }}>\r\n        <Stage\r\n          style={{ border: \"3px solid green\", margin: \"3rem\" }}\r\n          width={window.innerWidth / 3}\r\n          height={window.innerHeight / 3}\r\n        >\r\n          <Layer>\r\n            {squares.map((square) => (\r\n              <>\r\n                <Group draggable>\r\n                  <Text x={110} y={30} text={` ${square[0]} ר`} fontSize={15} />\r\n                  <Text\r\n                    x={75}\r\n                    y={100}\r\n                    text={` ${square[1]} א`}\r\n                    fontSize={15}\r\n                    rotationDeg={270}\r\n                  />\r\n                  <Rect\r\n                    x={100}\r\n                    y={50}\r\n                    width={square[0] / 5}\r\n                    height={square[1] / 5}\r\n                    fill='green'\r\n                    stroke='black'\r\n                    strokeWidth='2'\r\n                  />\r\n                </Group>\r\n              </>\r\n            ))}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"45","line":27,"column":6,"nodeType":"46","endLine":27,"endColumn":15,"suggestions":"47"},{"ruleId":"40","severity":1,"message":"48","line":7,"column":3,"nodeType":"42","messageId":"43","endLine":7,"endColumn":9},{"ruleId":"40","severity":1,"message":"49","line":8,"column":3,"nodeType":"42","messageId":"43","endLine":8,"endColumn":7},{"ruleId":"40","severity":1,"message":"50","line":9,"column":3,"nodeType":"42","messageId":"43","endLine":9,"endColumn":8},{"ruleId":"40","severity":1,"message":"51","line":10,"column":3,"nodeType":"42","messageId":"43","endLine":10,"endColumn":6},{"ruleId":"36","replacedBy":"52"},{"ruleId":"38","replacedBy":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'bestResult'. Either include it or remove the dependency array.","ArrayExpression",["56"],"'Circle' is defined but never used.","'Line' is defined but never used.","'Label' is defined but never used.","'Tag' is defined but never used.",["54"],["55"],"no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},"Update the dependencies array to be: [bestResult, squares]",{"range":"59","text":"60"},[908,917],"[bestResult, squares]"]
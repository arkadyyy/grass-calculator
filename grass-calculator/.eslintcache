[{"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\App.js":"2","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\reportWebVitals.js":"3","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\pages\\Home.js":"4","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\PchatWithDirection.js":"5","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\minChiburNoDirection.js":"6","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\minChiburWithDirection.js":"7","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\components\\Konva.js":"8","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\chiburCalc.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":382,"mtime":1609757129286,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":26898,"mtime":1609878404098,"results":"14","hashOfConfig":"11"},{"size":774,"mtime":1609245497404,"results":"15","hashOfConfig":"11"},{"size":699,"mtime":1609246440099,"results":"16","hashOfConfig":"11"},{"size":718,"mtime":1609757129288,"results":"17","hashOfConfig":"11"},{"size":6033,"mtime":1609942948125,"results":"18","hashOfConfig":"11"},{"size":3290,"mtime":1609876458398,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"jbplph",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\index.js",[],["41","42"],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\App.js",[],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\pages\\Home.js",["43","44","45","46","47"],"import \"../App.css\";\r\nimport Konva from \"../components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  Form,\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\n// import calculateBestOption from \"../calculator\";\r\nimport ChiburCalc from \"../chiburCalc\";\r\nimport PchatWithDirection from \"../PchatWithDirection\";\r\nimport MinChiburNoDirection from \"../minChiburNoDirection\";\r\nimport MinChiburWithDirection from \"../minChiburWithDirection\";\r\n\r\n////////////////////////////////////////////////////////////////////////\r\n\r\nfunction Home({ history }) {\r\n  //all squares entered\r\n  const [squares, setsquares] = useState([]);\r\n\r\n  //best result for client considering pchat only (\"pchat\" = loss)\r\n  const [resultForClientPchat, setresultForClientPchat] = useState([]);\r\n\r\n  //best result for client considering pchat and direction (\"direction\"= means - the direction the grass would streatch out )\r\n  const [resultPchatWithDirection, setresultPchatWithDirection] = useState([]);\r\n\r\n  //resultMinChiburNoDirection- \"Chibur\"= connection.\"no direction\"- not consider the grass direction)\r\n  const [resultMinChiburNoDirection, setResultMinChiburNoDirection] = useState(\r\n    []\r\n  );\r\n  //resultMinChiburWithDirection- \"Chibur\"= connection.\"no direction\"- not consider the grass direction)\r\n  const [\r\n    resultMinChiburWithDirection,\r\n    setResultMinChiburWithDirection,\r\n  ] = useState([]);\r\n\r\n  //best result for client considering connections only (\"connections\" means- the numbar of piece we use, sometimes the customer prefare to have los but not to have more pieces)\r\n  // considering the grass direction - giving solutions for each direction\r\n  //all x axis\r\n  const [x_directionResultForClient, setX_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //all y axis results\r\n  const [y_directionResultForClient, setY_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //summary state\r\n\r\n  const [summary, setSummary] = useState({\r\n    minPchatSummary: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n    minPchatWithDirectionSummary: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n    minChiburNoDirection: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n\r\n    minChiburWithDirection: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n  });\r\n\r\n  //input values\r\n  const [width, setwidth] = useState(0);\r\n  const [length, setlength] = useState(0);\r\n\r\n  //squares color\r\n  const [color, setColor] = useState(getRandomColour());\r\n  const [titleColor, setTitleColor] = useState(getRandomColour());\r\n\r\n  function getRandomColour() {\r\n    var red = Math.floor(Math.random() * 255);\r\n    var green = Math.floor(Math.random() * 255);\r\n    var blue = Math.floor(Math.random() * 255);\r\n\r\n    return \"rgb(\" + red + \",\" + green + \",\" + blue + \" )\";\r\n  }\r\n\r\n  const [openSummary, setopenSummary] = useState(false);\r\n\r\n  useEffect(() => {\r\n    bestResult();\r\n    console.log(\"summary : \", summary);\r\n  }, [squares]);\r\n\r\n  useEffect(() => {\r\n    bestResultPchatWithDirection();\r\n    bestMinChiburNoDirection();\r\n    bestMinChiburWithDirection();\r\n  }, [x_directionResultForClient]);\r\n\r\n  function bestMinChiburWithDirection() {\r\n    let result5 = MinChiburWithDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n    console.log(\"result5:\", result5);\r\n    setResultMinChiburWithDirection(result5);\r\n  }\r\n\r\n  function bestMinChiburNoDirection() {\r\n    let result4 = MinChiburNoDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n\r\n    setResultMinChiburNoDirection(result4);\r\n  }\r\n\r\n  function bestResultPchatWithDirection() {\r\n    let result3 = PchatWithDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n\r\n    setresultPchatWithDirection(result3);\r\n  }\r\n\r\n  function summaryAllOptions() {\r\n    // \"P\"=Pchat. not considering the direction\r\n    let opt2AmountP = 0;\r\n    let opt2lengthP = 0;\r\n    let opt3AmountP = 0;\r\n    let opt3lengthP = 0;\r\n    let opt4AmountP = 0;\r\n    let opt4lengthP = 0;\r\n    let pchatP = 0;\r\n    resultForClientPchat.forEach((square) => {\r\n      opt2AmountP += square.opt2.amount;\r\n      opt2lengthP += square.opt2.length;\r\n      opt3AmountP += square.opt3.amount;\r\n      opt3lengthP += square.opt3.length;\r\n      opt4AmountP += square.opt4.amount;\r\n      opt4lengthP += square.opt4.length;\r\n      pchatP += square.pchat;\r\n    });\r\n    // \"PD\"=Pchat+ considering the Direction\r\n    let opt2AmountPD = 0;\r\n    let opt2lengthPD = 0;\r\n    let opt3AmountPD = 0;\r\n    let opt3lengthPD = 0;\r\n    let opt4AmountPD = 0;\r\n    let opt4lengthPD = 0;\r\n    let pchatPD = 0;\r\n\r\n    resultPchatWithDirection.forEach((square) => {\r\n      opt2AmountPD += square.opt2.amount;\r\n      opt2lengthPD += square.opt2.length;\r\n      opt3AmountPD += square.opt3.amount;\r\n      opt3lengthPD += square.opt3.length;\r\n      opt4AmountPD += square.opt4.amount;\r\n      opt4lengthPD += square.opt4.length;\r\n      pchatPD += square.pchat;\r\n    });\r\n    // result  of Min \"Chiburim\" (connections) Not consider Direction\r\n    let opt2AmountC = 0;\r\n    let opt2lengthC = 0;\r\n    let opt3AmountC = 0;\r\n    let opt3lengthC = 0;\r\n    let opt4AmountC = 0;\r\n    let opt4lengthC = 0;\r\n    let pchatC = 0;\r\n\r\n    resultMinChiburNoDirection.forEach((square) => {\r\n      opt2AmountC += square.opt2.amount;\r\n      opt2lengthC += square.opt2.length;\r\n      opt3AmountC += square.opt3.amount;\r\n      opt3lengthC += square.opt3.length;\r\n      opt4AmountC += square.opt4.amount;\r\n      opt4lengthC += square.opt4.length;\r\n      pchatC += square.pchat;\r\n    });\r\n\r\n    // result  of Min \"Chiburim\" (connections) + consider Direction\r\n    let opt2AmountCD = 0;\r\n    let opt2lengthCD = 0;\r\n    let opt3AmountCD = 0;\r\n    let opt3lengthCD = 0;\r\n    let opt4AmountCD = 0;\r\n    let opt4lengthCD = 0;\r\n    let pchatCD = 0;\r\n\r\n    resultMinChiburWithDirection.forEach((square) => {\r\n      opt2AmountCD += square.opt2.amount;\r\n      opt2lengthCD += square.opt2.length;\r\n      opt3AmountCD += square.opt3.amount;\r\n      opt3lengthCD += square.opt3.length;\r\n      opt4AmountCD += square.opt4.amount;\r\n      opt4lengthCD += square.opt4.length;\r\n      pchatCD += square.pchat;\r\n    });\r\n\r\n    setSummary({\r\n      ...summary,\r\n      minPchatSummary: {\r\n        title: `מינימום פחת`,\r\n        description: `ניצול מירבי של גלילי הדשא שהזומנו`,\r\n        opt2: opt2AmountP,\r\n        opt2length: opt2lengthP,\r\n        opt3: opt3AmountP,\r\n        opt3length: opt3lengthP,\r\n        opt4: opt4AmountP,\r\n        opt4length: opt4lengthP,\r\n        pchat: pchatP.toFixed(2),\r\n      },\r\n      minPchatWithDirectionSummary: {\r\n        title: `מינימום פחת + כיוון סיב אחיד בין הגלילים`,\r\n        description:\r\n          \"  ניצול מירבי של גלילי הדשא שהוזמנו בתנאי של שמירה על כיוון פריסה אחיד של כל הגלילים\",\r\n        opt2: opt2AmountPD,\r\n        opt2length: opt2lengthPD,\r\n        opt3: opt3AmountPD,\r\n        opt3length: opt3lengthPD,\r\n        opt4: opt4AmountPD,\r\n        opt4length: opt4lengthPD,\r\n        pchat: pchatPD,\r\n      },\r\n      minChiburNoDirection: {\r\n        title: \"מינימום חיבורים\",\r\n        description: \"כיסוי השטח עם מספר מינימלי של גלילי דשא סינטטי \",\r\n        opt2: opt2AmountC,\r\n        opt2length: opt2lengthC,\r\n        opt3: opt3AmountC,\r\n        opt3length: opt3lengthC,\r\n        opt4: opt4AmountC,\r\n        opt4length: opt4lengthC,\r\n        pchat: pchatC,\r\n      },\r\n      minChiburWithDirection: {\r\n        title: `מינימום חיבורים + כיוון סיב אחיד בין הגלילים`,\r\n        description: `מינימום חיבורים + כיוון סיב אחיד בין הגלילים`,\r\n        opt2: opt2AmountCD,\r\n        opt2length: opt2lengthCD,\r\n        opt3: opt3AmountCD,\r\n        opt3length: opt3lengthCD,\r\n        opt4: opt4AmountCD,\r\n        opt4length: opt4lengthCD,\r\n        pchat: pchatCD,\r\n      },\r\n    });\r\n  }\r\n\r\n  function bestResult() {\r\n    squares.forEach((square) => {\r\n      //  פחת מינימלי בלי כיוון פריסה\r\n      // min pchat no direction consider\r\n\r\n      let result1 = ChiburCalc(square[0], square[1], square[2]);\r\n      let result2 = ChiburCalc(square[1], square[0], square[2]);\r\n      if (result1.pchat === result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else if (result1.pchat < result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else {\r\n        let inputLength = result2.initialWidth;\r\n        let inputWidth = result2.initialLength;\r\n        result2.initialWidth = inputWidth;\r\n        result2.initialLength = inputLength;\r\n        setresultForClientPchat([...resultForClientPchat, result2]);\r\n      }\r\n\r\n      // כיוון פריסה\r\n      setX_DirectionResultForClient([...x_directionResultForClient, result1]);\r\n      let inputLength = result2.initialWidth;\r\n      let inputWidth = result2.initialLength;\r\n      result2.initialWidth = inputWidth;\r\n      result2.initialLength = inputLength;\r\n      setY_DirectionResultForClient([...y_directionResultForClient, result2]);\r\n    });\r\n\r\n    summaryAllOptions();\r\n  }\r\n\r\n  function ControlledTabs() {\r\n    const [key, setKey] = useState(\r\n      \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\"\r\n    );\r\n    return (\r\n      <>\r\n        <Tabs id='controlled-tab' activeKey={key} onSelect={(k) => setKey(k)}>\r\n          {Object.entries(summary).map(([objKey, value], i) => (\r\n            // {/* <Tab eventKey=\"מינימום פחת + כיוון סיב אחיד\" title= \"מינימום פחת + כיוון סיב אחיד\"> */}\r\n            <Tab eventKey={value.title} title={value.title}>\r\n              {/* <Container style={{ textAlign: \"right\", display:\"flex\", flexDirection:\"column\", alignItems:\"center\"}}> */}\r\n              <Row style={{ direction: \"rtl\" }}>\r\n                <Col sm={6}>\r\n                  <Card\r\n                    className='my-5'\r\n                    border='secondary'\r\n                    style={{ width: \"100%\" }}\r\n                  >\r\n                    <>\r\n                      <Card.Body\r\n                      // style={{\r\n                      //   display: \"grid\",\r\n                      //   gridAutoColumns: \"auto auto\",\r\n                      //   gridTemplateRows:'150px'\r\n                      // }}\r\n                      >\r\n                        <Row md={12}>\r\n                          <Col\r\n                            md={3}\r\n                            style={{ padding: \"1rem\", margin: \"1rem\" }}\r\n                          >\r\n                            <Card.Text style={{ textAlign: \"right\" }}>\r\n                              <strong> סה\"כ גלילים ברוחב 2 מטר </strong>\r\n                              <hr></hr>\r\n                              <span>כמות: {value.opt2}</span>\r\n                              <br></br>\r\n                              <span> באורך: {value.opt2length}</span>\r\n                              <br></br>\r\n                            </Card.Text>\r\n                            <Card.Text style={{ textAlign: \"right\" }}>\r\n                              <strong> סה\"כ גלילים ברוחב 3 מטר </strong>\r\n                              <hr></hr>\r\n                              <span>כמות: {value.opt3}</span>\r\n                              <br></br>\r\n                              <span> באורך: {value.opt3length}</span>\r\n                              <br></br>\r\n                            </Card.Text>\r\n                          </Col>\r\n                          <Col>\r\n                            <Card.Text style={{ textAlign: \"right\" }}>\r\n                              <strong> סה\"כ גלילים ברוחב 4 מטר </strong>\r\n                              <hr></hr>\r\n                              <span>כמות: {value.opt4}</span>\r\n                              <br></br>\r\n                              <span> באורך: {value.opt4length}</span>\r\n                              <br></br>\r\n                            </Card.Text>\r\n                            <Card.Text style={{ textAlign: \"right\" }}>\r\n                              <strong> סה\"כ פחת </strong>\r\n                              <hr></hr>\r\n                              <span>מ\"ר{value.pchat}</span>\r\n                              <br></br>\r\n                            </Card.Text>\r\n                          </Col>\r\n                        </Row>\r\n                      </Card.Body>\r\n                    </>\r\n                  </Card>\r\n                </Col>\r\n\r\n                <Col sm={6}>\r\n                  <Konva\r\n                    resultForClientPchat={resultForClientPchat}\r\n                    xDirectionSquare={x_directionResultForClient}\r\n                    yDirectionSquare={y_directionResultForClient}\r\n                    summary={summary}\r\n                    tabKey={key}\r\n                    type='bottom'\r\n                    squares={squares}\r\n                    setsquares={setsquares}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              {/* </Container> */}\r\n            </Tab>\r\n          ))}\r\n        </Tabs>\r\n\r\n        <h3 style={{ textAlign: \"center\" }}>פירוט האפשרויות השונות </h3>\r\n\r\n        {key === \"מינימום פחת\" && (\r\n          <>\r\n            <strong>מינימום פחת-פירוט</strong>\r\n            <br></br>\r\n            <Container>\r\n              <Row>\r\n                {resultForClientPchat.map((square, index) => {\r\n                  return (\r\n                    <>\r\n                      <Col md={3} style={{ padding: \"1rem\", margin: \"1rem\" }}>\r\n                        <Card\r\n                          border='dark'\r\n                          //  bg={'secondary'}\r\n                          // bg={variant.toLowerCase()}\r\n                          // key={idx}\r\n                          // text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                          text={\"black\"}\r\n                          style={{ width: \"18rem\" }}\r\n                          className='mb-2'\r\n                        >\r\n                          <Card.Title style={{ background: `${square.color}` }}>\r\n                            מלבן מספר {index + 1} אורך {square.initialLength}{\" \"}\r\n                            רוחב{square.initialWidth}\r\n                          </Card.Title>\r\n                          <Card.Text>\r\n                            <hr></hr>\r\n                            {square.opt4.amount\r\n                              ? ` סה\"כ גלילים ברוחב 4 מטר : ${square.opt4.amount}, באורך ${square.opt4.length} מטר `\r\n                              : null}\r\n                            {square.opt4.amount ? <br></br> : null}\r\n                            {square.opt3.amount\r\n                              ? ` סה\"כ גלילים ברוחב 3 מטר : ${square.opt3.amount}, באורך ${square.opt3.length} מטר `\r\n                              : null}\r\n                            {square.opt3.amount ? <br></br> : null}\r\n                            {square.opt2.amount\r\n                              ? ` סה\"כ גלילים ברוחב 2 מטר : ${square.opt2.amount}, באורך ${square.opt2.length} מטר `\r\n                              : null}\r\n                            {square.opt2.amount ? <br></br> : null}\r\n                            פחת{square.pchat} מ\"ר\r\n                            <hr></hr>\r\n                          </Card.Text>\r\n                        </Card>\r\n                      </Col>\r\n                    </>\r\n                  );\r\n                })}\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n\r\n        {key === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\" && (\r\n          <>\r\n            <strong>מינימום פחת + כיוון סיב אחיד בין הגלילים-פירוט</strong>\r\n            <br></br>\r\n            <Container>\r\n              <Row>\r\n                {resultPchatWithDirection.map((square, index) => {\r\n                  return (\r\n                    <>\r\n                      <Col md={3} style={{ padding: \"1rem\", margin: \"1rem\" }}>\r\n                        <Card border='dark' style={{ width: \"18rem\" }}>\r\n                          <Card.Title style={{ background: `${square.color}` }}>\r\n                            מלבן מספר {index + 1} אורך {square.initialLength}{\" \"}\r\n                            רוחב{square.initialWidth}\r\n                          </Card.Title>\r\n                          <Card.Text>\r\n                            <hr></hr>\r\n                            {square.opt4.amount\r\n                              ? ` סה\"כ גלילים ברוחב 4 מטר : ${square.opt4.amount}, באורך ${square.opt4.length} מטר `\r\n                              : null}\r\n                            {square.opt4.amount ? <br></br> : null}\r\n                            {square.opt3.amount\r\n                              ? ` סה\"כ גלילים ברוחב 3 מטר : ${square.opt3.amount}, באורך ${square.opt3.length} מטר `\r\n                              : null}\r\n                            {square.opt3.amount ? <br></br> : null}\r\n                            {square.opt2.amount\r\n                              ? ` סה\"כ גלילים ברוחב 2 מטר : ${square.opt2.amount}, באורך ${square.opt2.length} מטר `\r\n                              : null}\r\n                            {square.opt2.amount ? <br></br> : null}\r\n                            פחת{square.pchat} מ\"ר\r\n                            <hr></hr>\r\n                          </Card.Text>\r\n                        </Card>\r\n                      </Col>\r\n                    </>\r\n                  );\r\n                })}\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n\r\n        {key === \"מינימום חיבורים\" && (\r\n          <>\r\n            <strong>מינימום חיבורים - פירוט</strong>\r\n            <br></br>\r\n            <Container>\r\n              <Row>\r\n                {resultMinChiburNoDirection.map((square, index) => {\r\n                  return (\r\n                    <>\r\n                      <Col md={3} style={{ padding: \"1rem\", margin: \"1rem\" }}>\r\n                        <Card border='dark' style={{ width: \"18rem\" }}>\r\n                          <Card.Title style={{ background: `${square.color}` }}>\r\n                            מלבן מספר {index + 1} אורך {square.initialLength}{\" \"}\r\n                            רוחב{square.initialWidth}\r\n                          </Card.Title>\r\n                          <Card.Text>\r\n                            <hr></hr>\r\n                            {square.opt4.amount\r\n                              ? ` סה\"כ גלילים ברוחב 4 מטר : ${square.opt4.amount}, באורך ${square.opt4.length} מטר `\r\n                              : null}\r\n                            {square.opt4.amount ? <br></br> : null}\r\n                            {square.opt3.amount\r\n                              ? ` סה\"כ גלילים ברוחב 3 מטר : ${square.opt3.amount}, באורך ${square.opt3.length} מטר `\r\n                              : null}\r\n                            {square.opt3.amount ? <br></br> : null}\r\n                            {square.opt2.amount\r\n                              ? ` סה\"כ גלילים ברוחב 2 מטר : ${square.opt2.amount}, באורך ${square.opt2.length} מטר `\r\n                              : null}\r\n                            {square.opt2.amount ? <br></br> : null}\r\n                            פחת{square.pchat} מ\"ר\r\n                            <hr></hr>\r\n                          </Card.Text>\r\n                        </Card>\r\n                      </Col>\r\n                    </>\r\n                  );\r\n                })}\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n        {key === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\" && (\r\n          <>\r\n            <strong>מינימום חיבורים+כיוון סיב אחיד בין הגלילים - פירוט</strong>\r\n            <br></br>\r\n            <Container>\r\n              <Row>\r\n                {resultMinChiburWithDirection.map((square, index) => {\r\n                  return (\r\n                    <>\r\n                      <Col md={3} style={{ padding: \"1rem\", margin: \"1rem\" }}>\r\n                        <Card border='dark' style={{ width: \"18rem\" }}>\r\n                          <Card.Title style={{ background: `${square.color}` }}>\r\n                            מלבן מספר {index + 1} אורך {square.initialLength}{\" \"}\r\n                            רוחב{square.initialWidth}\r\n                          </Card.Title>\r\n                          <Card.Text>\r\n                            <hr></hr>\r\n                            {square.opt4.amount\r\n                              ? ` סה\"כ גלילים ברוחב 4 מטר : ${square.opt4.amount}, באורך ${square.opt4.length} מטר `\r\n                              : null}\r\n                            {square.opt4.amount ? <br></br> : null}\r\n                            {square.opt3.amount\r\n                              ? ` סה\"כ גלילים ברוחב 3 מטר : ${square.opt3.amount}, באורך ${square.opt3.length} מטר `\r\n                              : null}\r\n                            {square.opt3.amount ? <br></br> : null}\r\n                            {square.opt2.amount\r\n                              ? ` סה\"כ גלילים ברוחב 2 מטר : ${square.opt2.amount}, באורך ${square.opt2.length} מטר `\r\n                              : null}\r\n                            {square.opt2.amount ? <br></br> : null}\r\n                            פחת{square.pchat} מ\"ר\r\n                            <hr></hr>\r\n                          </Card.Text>\r\n                        </Card>\r\n                      </Col>\r\n                    </>\r\n                  );\r\n                })}\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <h4 style={{ textAlign: \"right\" }}>  הוראות שימוש</h4>\r\n\r\n      <ol style={{margin: \"2rem\", direction:\"rtl\", float:\"right\" }}> */}\r\n      {/* {titleList.map(line => {\r\n          return (\r\n            <li key={line.key} style={{ display: \"flex\" }}>{line.key+1}.{line.description} </li>\r\n          );\r\n        })} */}\r\n      {/* <div style={{textAlign:\"start\"}}>\r\n         <h5 >בתחתית המסך יופיעו התוצאות האפשריות להזמנה.</h5>\r\n        <h4> בתחילה תופיע רשימה של {<strong>סיכום</strong>}.</h4>\r\n        <h4>לאחר מכן יופיע {<strong>פירוט</strong>}. </h4>\r\n        </div>\r\n      </ol> */}\r\n\r\n      <div className='App'>\r\n        <Konva squares={squares} setsquares={setsquares} />\r\n\r\n        <InputGroup\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"flex-end\",\r\n          }}\r\n          className='mb-3 p-5'\r\n        >\r\n          <h1 style={{ textAlign: \"right\", marginBottom: \"3rem\" }}>\r\n            {\" \"}\r\n            מחשבון דשא סינטטי\r\n          </h1>\r\n\r\n          <Form.Label>\r\n            <strong style={{ textAlign: \"right\" }}> רוחב במטרים</strong>\r\n          </Form.Label>\r\n          <FormControl\r\n            // placeholder='הכנס רוחב'\r\n            value={width}\r\n            style={{\r\n              width: \"35%\",\r\n              height: \"2rem\",\r\n              direction: \"rtl\",\r\n              maxHeight: \"2rem\",\r\n            }}\r\n            aria-label='Default'\r\n            aria-describedby='inputGroup-sizing-default'\r\n            id='width'\r\n            onChange={(e) => {\r\n              setwidth(e.target.value);\r\n            }}\r\n          />\r\n          <Form.Label>\r\n            <strong>אורך מטרים</strong>\r\n          </Form.Label>\r\n          <FormControl\r\n            // placeholder='הכנס אורך'\r\n            value={length}\r\n            style={{ width: \"35%\", direction: \"rtl\", maxHeight: \"2rem\" }}\r\n            aria-label='Default'\r\n            aria-describedby='inputGroup-sizing-default'\r\n            id='length'\r\n            onChange={(e) => {\r\n              setlength(e.target.value);\r\n            }}\r\n          />\r\n\r\n          <div className='buttons'>\r\n            <Button\r\n              onClick={() => {\r\n                setColor(getRandomColour());\r\n                setTitleColor(getRandomColour());\r\n                setsquares([...squares, [+width, +length, color]]);\r\n                setwidth(\"\");\r\n                setlength(\"\");\r\n                summaryAllOptions();\r\n              }}\r\n              className='m-3'\r\n              variant='success'\r\n            >\r\n              הוסף מלבן\r\n            </Button>\r\n            <Button\r\n              className='m-3'\r\n              variant='success'\r\n              onClick={() => {\r\n                setopenSummary(true);\r\n\r\n                summaryAllOptions();\r\n              }}\r\n            >\r\n              חשב\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                setsquares([]);\r\n                setresultForClientPchat([]);\r\n                setSummary([]);\r\n                setwidth(0);\r\n                setlength(0);\r\n                setResultMinChiburNoDirection([]);\r\n                setResultMinChiburWithDirection([]);\r\n                setX_DirectionResultForClient([]);\r\n                setY_DirectionResultForClient([]);\r\n                setresultPchatWithDirection([]);\r\n                setopenSummary(false);\r\n              }}\r\n              className='m-3'\r\n              variant='success'\r\n            >\r\n              נקה\r\n            </Button>\r\n          </div>\r\n        </InputGroup>\r\n      </div>\r\n      <hr></hr>\r\n\r\n      {openSummary && (\r\n        <div className='summary'>\r\n          <h3 style={{ textAlign: \"center\" }}>אלו התוצאות האפשריות עבורכם </h3>\r\n          <ControlledTabs />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\PchatWithDirection.js",["48","49","50","51"],"function PchatWithDirection(arrX, arrY) {\r\n  let resultX = arrX.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n  let resultY = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n\r\n  if (resultX === resultY) {\r\n    let resultXConnections = arrX.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n      \r\n    }, 0);\r\n\r\n    let resultYConnections = arrY.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n    }, 0);\r\n\r\n    if (resultXConnections >= resultYConnections) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  } else {\r\n    if (resultX > resultY) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PchatWithDirection;\r\n","C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\minChiburWithDirection.js",[],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\components\\Konva.js",["52","53"],"C:\\fullstack\\desha-sintetyi\\grass-calculator\\src\\chiburCalc.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":8,"column":3,"nodeType":"60","messageId":"61","endLine":8,"endColumn":8},{"ruleId":"58","severity":1,"message":"62","line":16,"column":3,"nodeType":"60","messageId":"61","endLine":16,"endColumn":14},{"ruleId":"58","severity":1,"message":"63","line":107,"column":10,"nodeType":"60","messageId":"61","endLine":107,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":122,"column":6,"nodeType":"66","endLine":122,"endColumn":15,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"68","line":128,"column":6,"nodeType":"66","endLine":128,"endColumn":34,"suggestions":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":43,"nodeType":"72","messageId":"73","endLine":2,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":5,"column":43,"nodeType":"72","messageId":"73","endLine":5,"endColumn":45},{"ruleId":"70","severity":1,"message":"71","line":10,"column":56,"nodeType":"72","messageId":"73","endLine":10,"endColumn":58},{"ruleId":"70","severity":1,"message":"71","line":15,"column":56,"nodeType":"72","messageId":"73","endLine":15,"endColumn":58},{"ruleId":"64","severity":1,"message":"74","line":37,"column":6,"nodeType":"66","endLine":37,"endColumn":14,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":137,"column":25,"nodeType":"78","endLine":137,"endColumn":42},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'CardColumns' is defined but never used.","'titleColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection', 'bestMinChiburWithDirection', and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["82"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'arrayUsed', 'resultForClientPchat', 'xDirectionSquare', and 'yDirectionSquare'. Either include them or remove the dependency array. If 'setarrayUsed' needs the current value of 'resultForClientPchat', you can also switch to useReducer instead of useState and read 'resultForClientPchat' in the reducer.",["83"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"90","text":"91"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"92","text":"93"},"Update the dependencies array to be: [arrayUsed, resultForClientPchat, tabKey, xDirectionSquare, yDirectionSquare]",{"range":"94","text":"95"},[3441,3450],"[bestResult, squares, summary]",[3587,3615],"[bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",[1135,1143],"[arrayUsed, resultForClientPchat, tabKey, xDirectionSquare, yDirectionSquare]"]
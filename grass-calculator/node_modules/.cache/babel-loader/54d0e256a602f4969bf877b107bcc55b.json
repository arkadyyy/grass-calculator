{"ast":null,"code":"function MinChiburNoDirection(arrX, arrY) {\n  let returnedArr = [];\n\n  for (let i = 0; i < arrX.length; i++) {\n    let optX = arrX[i].opt2 + arrX[i].opt3 + arrX[i].opt4;\n    let optY = arrY[i].opt2 + arrY[i].opt3 + arrY[i].opt4;\n\n    if (optX === optY) {\n      if (arrX[i].pchat > arrY[i].pchat) {\n        returnedArr.push(arrY[i]);\n      } else {\n        returnedArr.push(arrX[i]);\n      }\n    } else if (optX > optY) {\n      returnedArr.push(optY[i]);\n    } else {\n      returnedArr.push(optX[i]);\n    }\n  }\n\n  return returnedArr;\n}\n\n_c = MinChiburNoDirection;\nexport default MinChiburNoDirection;\n\nvar _c;\n\n$RefreshReg$(_c, \"MinChiburNoDirection\");","map":{"version":3,"sources":["C:/fullstack/grass-calculator/grass-calculator/src/minChiburNoDirection.js"],"names":["MinChiburNoDirection","arrX","arrY","returnedArr","i","length","optX","opt2","opt3","opt4","optY","pchat","push"],"mappings":"AAAA,SAASA,oBAAT,CAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AACxC,MAAIC,WAAW,GAAG,EAAlB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,IAAI,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,IAAR,GAAeN,IAAI,CAACG,CAAD,CAAJ,CAAQI,IAAvB,GAA8BP,IAAI,CAACG,CAAD,CAAJ,CAAQK,IAAjD;AACA,QAAIC,IAAI,GAAGR,IAAI,CAACE,CAAD,CAAJ,CAAQG,IAAR,GAAeL,IAAI,CAACE,CAAD,CAAJ,CAAQI,IAAvB,GAA8BN,IAAI,CAACE,CAAD,CAAJ,CAAQK,IAAjD;;AAEA,QAAIH,IAAI,KAAKI,IAAb,EAAmB;AACjB,UAAIT,IAAI,CAACG,CAAD,CAAJ,CAAQO,KAAR,GAAgBT,IAAI,CAACE,CAAD,CAAJ,CAAQO,KAA5B,EAAmC;AACjCR,QAAAA,WAAW,CAACS,IAAZ,CAAiBV,IAAI,CAACE,CAAD,CAArB;AACD,OAFD,MAEO;AACLD,QAAAA,WAAW,CAACS,IAAZ,CAAiBX,IAAI,CAACG,CAAD,CAArB;AACD;AACF,KAND,MAMO,IAAIE,IAAI,GAAGI,IAAX,EAAiB;AACtBP,MAAAA,WAAW,CAACS,IAAZ,CAAiBF,IAAI,CAACN,CAAD,CAArB;AACD,KAFM,MAEA;AACLD,MAAAA,WAAW,CAACS,IAAZ,CAAiBN,IAAI,CAACF,CAAD,CAArB;AACD;AACF;;AAED,SAAOD,WAAP;AACD;;KArBQH,oB;AAuBT,eAAeA,oBAAf","sourcesContent":["function MinChiburNoDirection(arrX, arrY) {\r\n  let returnedArr = [];\r\n\r\n  for (let i = 0; i < arrX.length; i++) {\r\n    let optX = arrX[i].opt2 + arrX[i].opt3 + arrX[i].opt4;\r\n    let optY = arrY[i].opt2 + arrY[i].opt3 + arrY[i].opt4;\r\n\r\n    if (optX === optY) {\r\n      if (arrX[i].pchat > arrY[i].pchat) {\r\n        returnedArr.push(arrY[i]);\r\n      } else {\r\n        returnedArr.push(arrX[i]);\r\n      }\r\n    } else if (optX > optY) {\r\n      returnedArr.push(optY[i]);\r\n    } else {\r\n      returnedArr.push(optX[i]);\r\n    }\r\n  }\r\n\r\n  return returnedArr;\r\n}\r\n\r\nexport default MinChiburNoDirection;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction MinChiburNoDirection(arrX, arrY) {\n  _s();\n\n  // let returnedArr = [];\n  const [returnedArr, setReturnedArr] = useState([]);\n\n  for (let i = 0; i < arrX.length; i++) {\n    let test = arrX[i].opt2;\n    console.log(\"test : \", test);\n    let optX = arrX[i].opt2.amount + arrX[i].opt3.amount + arrX[i].opt4.amount;\n    console.log(optX);\n    let optY = arrY[i].opt2.amount + arrY[i].opt3.amount + arrY[i].opt4.amount;\n    console.log(optY);\n\n    if (optX === optY) {\n      if (arrX[i].pchat > arrY[i].pchat) {\n        // returnedArr.push(arrY[i]);\n        setReturnedArr([...returnedArr, arrY[i]]);\n        console.log(\"returnedArr:\", returnedArr);\n      } else {\n        // returnedArr.push(arrX[i]);\n        setReturnedArr([...returnedArr, arrX[i]]);\n        console.log(\"arrX[i]:\", arrX[i]);\n        console.log(\"returnedArr:\", returnedArr);\n      }\n    }\n\n    if (optX > optY) {\n      // returnedArr.push(optY[i]);\n      // returnedArr.push(optY[i]);\n      setReturnedArr([...returnedArr, optY[i]]);\n      console.log(\"returnedArr:\", returnedArr);\n    } else {\n      // returnedArr.push(optX[i]);\n      setReturnedArr([...returnedArr, optX[i]]);\n      console.log(\"returnedArr:\", returnedArr);\n    }\n  }\n\n  return returnedArr;\n}\n\n_s(MinChiburNoDirection, \"LHS9dLtsxErjvaeNUuGLwtKqh7w=\");\n\n_c = MinChiburNoDirection;\nexport default MinChiburNoDirection;\n\nvar _c;\n\n$RefreshReg$(_c, \"MinChiburNoDirection\");","map":{"version":3,"sources":["C:/fullstack/grass-calculator/grass-calculator/src/minChiburNoDirection.js"],"names":["useState","MinChiburNoDirection","arrX","arrY","returnedArr","setReturnedArr","i","length","test","opt2","console","log","optX","amount","opt3","opt4","optY","pchat"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAAA;;AACxC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,IAAI,GAAGN,IAAI,CAACI,CAAD,CAAJ,CAAQG,IAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,IAAvB;AACA,QAAII,IAAI,GAAGV,IAAI,CAACI,CAAD,CAAJ,CAAQG,IAAR,CAAaI,MAAb,GAAsBX,IAAI,CAACI,CAAD,CAAJ,CAAQQ,IAAR,CAAaD,MAAnC,GAA4CX,IAAI,CAACI,CAAD,CAAJ,CAAQS,IAAR,CAAaF,MAApE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,QAAII,IAAI,GAAGb,IAAI,CAACG,CAAD,CAAJ,CAAQG,IAAR,CAAaI,MAAb,GAAsBV,IAAI,CAACG,CAAD,CAAJ,CAAQQ,IAAR,CAAaD,MAAnC,GAA4CV,IAAI,CAACG,CAAD,CAAJ,CAAQS,IAAR,CAAaF,MAApE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;;AACA,QAAIJ,IAAI,KAAKI,IAAb,EAAmB;AACjB,UAAId,IAAI,CAACI,CAAD,CAAJ,CAAQW,KAAR,GAAgBd,IAAI,CAACG,CAAD,CAAJ,CAAQW,KAA5B,EAAmC;AACjC;AACAZ,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBD,IAAI,CAACG,CAAD,CAArB,CAAD,CAAd;AAEAI,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BP,WAA3B;AACD,OALD,MAKO;AACL;AACAC,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBF,IAAI,CAACI,CAAD,CAArB,CAAD,CAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBT,IAAI,CAACI,CAAD,CAA3B;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BP,WAA3B;AAED;AACF;;AAED,QAAIQ,IAAI,GAAGI,IAAX,EAAiB;AACf;AACA;AACAX,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBY,IAAI,CAACV,CAAD,CAArB,CAAD,CAAd;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BP,WAA3B;AACD,KAND,MAMO;AACL;AACAC,MAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiBQ,IAAI,CAACN,CAAD,CAArB,CAAD,CAAd;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BP,WAA3B;AACD;AACF;;AAED,SAAOA,WAAP;AACD;;GAxCQH,oB;;KAAAA,oB;AA0CT,eAAeA,oBAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction MinChiburNoDirection(arrX, arrY) {\r\n  // let returnedArr = [];\r\n  const [returnedArr, setReturnedArr] = useState([]);\r\n  for (let i = 0; i < arrX.length; i++) {\r\n    let test = arrX[i].opt2;\r\n    console.log(\"test : \", test);\r\n    let optX = arrX[i].opt2.amount + arrX[i].opt3.amount + arrX[i].opt4.amount;\r\n    console.log(optX);\r\n    let optY = arrY[i].opt2.amount + arrY[i].opt3.amount + arrY[i].opt4.amount;\r\n    console.log(optY);\r\n    if (optX === optY) {\r\n      if (arrX[i].pchat > arrY[i].pchat) {\r\n        // returnedArr.push(arrY[i]);\r\n        setReturnedArr([...returnedArr, arrY[i]]);\r\n        \r\n        console.log(\"returnedArr:\",returnedArr);\r\n      } else {\r\n        // returnedArr.push(arrX[i]);\r\n        setReturnedArr([...returnedArr, arrX[i]]);\r\n        console.log(\"arrX[i]:\",arrX[i]);\r\n        console.log(\"returnedArr:\",returnedArr);\r\n\r\n      }\r\n    }\r\n\r\n    if (optX > optY) {\r\n      // returnedArr.push(optY[i]);\r\n      // returnedArr.push(optY[i]);\r\n      setReturnedArr([...returnedArr, optY[i]]);\r\n\r\n      console.log(\"returnedArr:\",returnedArr);\r\n    } else {\r\n      // returnedArr.push(optX[i]);\r\n      setReturnedArr([...returnedArr, optX[i]]);\r\n      \r\n      console.log(\"returnedArr:\",returnedArr);\r\n    }\r\n  }\r\n\r\n  return returnedArr;\r\n}\r\n\r\nexport default MinChiburNoDirection;\r\n"]},"metadata":{},"sourceType":"module"}
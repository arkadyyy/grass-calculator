{"ast":null,"code":"function MinChiburNoDirection(arrX, arrY) {\n  let returnedArr = [];\n\n  for (let i = 0; i < arrX.length; i++) {\n    let optX = arrX[i].opt2.amount + arrX[i].opt3.amount + arrX[i].opt4.amount;\n    let optY = arrY[i].opt2.amount + arrY[i].opt3.amount + arrY[i].opt4.amount;\n\n    if (optX === optY) {\n      if (arrX[i].pchat > arrY[i].pchat) {\n        returnedArr.push(arrY[i]);\n      } else {\n        returnedArr.push(arrX[i]);\n      }\n    } else {\n      if (optX > optY) {\n        returnedArr.push(arrY[i]);\n      } else {\n        returnedArr.push(arrX[i]);\n      }\n    }\n  }\n\n  return returnedArr;\n}\n\n_c = MinChiburNoDirection;\nexport default MinChiburNoDirection;\n\nvar _c;\n\n$RefreshReg$(_c, \"MinChiburNoDirection\");","map":{"version":3,"sources":["C:/fullstack/grass-calculator/grass-calculator/src/minChiburNoDirection.js"],"names":["MinChiburNoDirection","arrX","arrY","returnedArr","i","length","optX","opt2","amount","opt3","opt4","optY","pchat","push"],"mappings":"AACA,SAASA,oBAAT,CAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAExC,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIE,IAAI,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQG,IAAR,CAAaC,MAAb,GAAsBP,IAAI,CAACG,CAAD,CAAJ,CAAQK,IAAR,CAAaD,MAAnC,GAA4CP,IAAI,CAACG,CAAD,CAAJ,CAAQM,IAAR,CAAaF,MAApE;AACA,QAAIG,IAAI,GAAGT,IAAI,CAACE,CAAD,CAAJ,CAAQG,IAAR,CAAaC,MAAb,GAAsBN,IAAI,CAACE,CAAD,CAAJ,CAAQK,IAAR,CAAaD,MAAnC,GAA4CN,IAAI,CAACE,CAAD,CAAJ,CAAQM,IAAR,CAAaF,MAApE;;AACA,QAAIF,IAAI,KAAKK,IAAb,EAAmB;AACjB,UAAIV,IAAI,CAACG,CAAD,CAAJ,CAAQQ,KAAR,GAAgBV,IAAI,CAACE,CAAD,CAAJ,CAAQQ,KAA5B,EAAmC;AACjCT,QAAAA,WAAW,CAACU,IAAZ,CAAiBX,IAAI,CAACE,CAAD,CAArB;AACD,OAFD,MAEO;AACLD,QAAAA,WAAW,CAACU,IAAZ,CAAiBZ,IAAI,CAACG,CAAD,CAArB;AACD;AACF,KAND,MAOK;AACH,UAAIE,IAAI,GAAGK,IAAX,EAAiB;AACfR,QAAAA,WAAW,CAACU,IAAZ,CAAiBX,IAAI,CAACE,CAAD,CAArB;AACD,OAFD,MAEO;AACLD,QAAAA,WAAW,CAACU,IAAZ,CAAiBZ,IAAI,CAACG,CAAD,CAArB;AACD;AACF;AACF;;AACD,SAAOD,WAAP;AACD;;KAtBQH,oB;AAwBT,eAAeA,oBAAf","sourcesContent":["\r\nfunction MinChiburNoDirection(arrX, arrY) {\r\n\r\n  let returnedArr = [];\r\n  for (let i = 0; i < arrX.length; i++) {\r\n    let optX = arrX[i].opt2.amount + arrX[i].opt3.amount + arrX[i].opt4.amount;  \r\n    let optY = arrY[i].opt2.amount + arrY[i].opt3.amount + arrY[i].opt4.amount;\r\n    if (optX === optY) {\r\n      if (arrX[i].pchat > arrY[i].pchat) {\r\n        returnedArr.push(arrY[i]);\r\n      } else {\r\n        returnedArr.push(arrX[i]);\r\n      }\r\n    }\r\n    else {\r\n      if (optX > optY) {\r\n        returnedArr.push(arrY[i]);\r\n      } else {\r\n        returnedArr.push(arrX[i]);\r\n      }\r\n    }\r\n  }\r\n  return returnedArr;\r\n}\r\n\r\nexport default MinChiburNoDirection;\r\n"]},"metadata":{},"sourceType":"module"}
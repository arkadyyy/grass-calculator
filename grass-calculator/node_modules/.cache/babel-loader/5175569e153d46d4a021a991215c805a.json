{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fullstack\\\\grass-calculator\\\\grass-calculator\\\\src\\\\components\\\\Konva.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\n\nconst Konva = ({\n  squares,\n  setsquares,\n  type,\n  tabKey,\n  summary,\n  xDirectionSquare,\n  yDirectionSquare,\n  resultForClientPchat,\n  resultPchatWithDirection,\n  resultMinChiburWithDirection,\n  resultMinChiburNoDirection\n}) => {\n  _s();\n\n  // {\n  //   opt4: { amount: 0, length: 0 },\n  //   opt3: { amount: 0, length: 0 },\n  //   opt2: { amount: 0, length: 0 },\n  //   pchat: 0,\n  // }\n  const [arrayUsed, setarrayUsed] = useState([]);\n  const [konvasquares, setkonvasquares] = useState(squares);\n  useEffect(() => {\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\n      setarrayUsed(resultMinChiburWithDirection);\n    }\n\n    if (tabKey === \"מינימום פחת\") {\n      setarrayUsed(resultForClientPchat);\n    }\n\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\n      setarrayUsed(resultPchatWithDirection);\n    }\n\n    if (tabKey === \"מינימום חיבורים\") {\n      setarrayUsed(resultPchatWithDirection);\n    }\n\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\n    console.log(\"arrayUsed : \", arrayUsed);\n  }, [tabKey]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Stage, {\n        style: {\n          border: \"1px solid #333\",\n          margin: \"3rem\",\n          borderRadius: \"5px\"\n        },\n        width: window.innerWidth / 2,\n        height: window.innerHeight / 2,\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: [type === \"top\" && squares.map((square, index) => {\n            let width = [];\n            let length = [];\n            let arrowDirection = [];\n\n            if (arrayUsed.length !== 0) {\n              if (arrayUsed[index].opt2.length === square[1] || arrayUsed[index].opt3.length === square[1] || arrayUsed[index].opt4.length === square[1]) {\n                width[index] = arrayUsed[index].opt2.amount * 2 + arrayUsed[index].opt3.amount * 3 + arrayUsed[index].opt4.amount * 4;\n                length[index] = square[1];\n                arrowDirection[index] = \"vertical\";\n              } else if (arrayUsed[index].opt2.length === square[0] || arrayUsed[index].opt3.length === square[0] || arrayUsed[index].opt4.length === square[0]) {\n                width[index] = square[0];\n                length[index] = arrayUsed[index].opt2.amount * 2 + arrayUsed[index].opt3.amount * 3 + arrayUsed[index].opt4.amount * 4;\n                arrowDirection[index] = \"horizantal\";\n              } // console.log(\"width : \", width);\n              // console.log(\"length : \", length);\n\n            }\n\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Group, {\n                draggable: true,\n                children: [arrowDirection[index] === \"vertical\" && /*#__PURE__*/_jsxDEV(Arrow, {\n                  x: 100,\n                  y: -45,\n                  points: [0, 110, 0, 150],\n                  width: 30,\n                  pointerLength: 5,\n                  pointerWidth: 5,\n                  fill: \"black\",\n                  stroke: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 25\n                }, this), arrowDirection[index] === \"horizantal\" && /*#__PURE__*/_jsxDEV(Arrow, {\n                  x: -285,\n                  y: 40,\n                  points: [472, 0, 500, 0],\n                  pointerLength: 5,\n                  pointerWidth: 5,\n                  fill: \"black\",\n                  stroke: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  x: 110,\n                  y: 30,\n                  text: ` ${square[0]} ר`,\n                  fontSize: 15\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  x: 75,\n                  y: 100,\n                  text: ` ${square[1]} א`,\n                  fontSize: 15,\n                  rotationDeg: 270\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Rect, {\n                  onClick: e => {\n                    console.log(e.target.absolutePosition());\n                    console.log(e.target);\n                    console.log(\"squares : \", squares);\n                    let squaresOriginal = [...squares];\n                    squaresOriginal[index][3] = e.target.absolutePosition().x;\n                    squaresOriginal[index][4] = e.target.absolutePosition().y;\n                    setkonvasquares(squaresOriginal);\n                  },\n                  x: 50,\n                  y: 100,\n                  width: square[0] * 40,\n                  height: square[1] * 40,\n                  fill: square[2],\n                  opacity: 0.6 // stroke='black'\n                  // strokeWidth='4'\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 23\n                }, this), type === \"bottom\" && /*#__PURE__*/_jsxDEV(Rect, {\n                  draggable: true,\n                  x: square[3],\n                  y: square[4],\n                  width: width[index] * 40,\n                  height: length[index] * 40,\n                  fill: \"transparent\",\n                  stroke: square[2],\n                  draggable: false,\n                  strokeWidth: \"2\",\n                  dash: [10, 10]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 25\n                }, this), type === \"bottom\" && /*#__PURE__*/_jsxDEV(Text, {\n                  x: square[3] + 20,\n                  y: square[4] + 10,\n                  text: `אורך דשא ${length[index]}`,\n                  fontSize: 15,\n                  fill: \"black\",\n                  rotationDeg: 270\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 25\n                }, this), type === \"bottom\" && /*#__PURE__*/_jsxDEV(Text, {\n                  x: 80,\n                  y: 0,\n                  text: `רוחב דשא ${width[index]}`,\n                  fontSize: 15,\n                  fill: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Text, {\n                  x: 120,\n                  y: 80,\n                  text: `${index + 1}`,\n                  fontSize: 15,\n                  fill: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          }), type === \"bottom\" && konvasquares.map((square, index) => {\n            let width = [];\n            let length = [];\n            let arrowDirection = []; //4 - 140\n            //3 - 105\n            //2 - 70\n\n            let lineRenderArr = []; // let lineRenderArr = [\n            //   [157, 227, 335],\n            //   [80, 230],\n            // ];\n\n            arrayUsed.forEach(square => {\n              let opt4Amount = +square.opt4.amount;\n              let opt3Amount = +square.opt3.amount;\n              let opt2Amount = +square.opt2.amount;\n              let squareLines = [];\n\n              while (opt4Amount > 0) {\n                if (squareLines.length > 0) {\n                  squareLines.push(+squareLines[squareLines.length - 1] + 160);\n                } else {\n                  squareLines.push(160);\n                }\n\n                opt4Amount--;\n              }\n\n              while (opt3Amount > 0) {\n                if (squareLines.length > 0) {\n                  squareLines.push(+squareLines[squareLines.length - 1] + 125);\n                } else {\n                  squareLines.push(125);\n                }\n\n                opt3Amount--;\n              }\n\n              while (opt2Amount > 0) {\n                if (squareLines.length > 0) {\n                  squareLines.push(+squareLines[squareLines.length - 1] + 90);\n                } else {\n                  squareLines.push(90);\n                }\n\n                opt2Amount--;\n              }\n\n              console.log(\"lineRenderArr : \", lineRenderArr);\n              lineRenderArr.push(squareLines);\n            });\n            lineRenderArr.forEach(arr => {\n              arr.pop();\n            });\n\n            if (arrayUsed.length !== 0) {\n              if (arrayUsed[index].opt2.length === square[1] || arrayUsed[index].opt3.length === square[1] || arrayUsed[index].opt4.length === square[1]) {\n                width[index] = arrayUsed[index].opt2.amount * 2 + arrayUsed[index].opt3.amount * 3 + arrayUsed[index].opt4.amount * 4;\n                length[index] = square[1];\n                arrowDirection[index] = \"vertical\";\n              } else if (arrayUsed[index].opt2.length === square[0] || arrayUsed[index].opt3.length === square[0] || arrayUsed[index].opt4.length === square[0]) {\n                width[index] = square[0];\n                length[index] = arrayUsed[index].opt2.amount * 2 + arrayUsed[index].opt3.amount * 3 + arrayUsed[index].opt4.amount * 4;\n                arrowDirection[index] = \"horizantal\";\n              } // console.log(\"width : \", width);\n              // console.log(\"length : \", length);\n\n            }\n\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Group, {\n                draggable: true,\n                children: [arrowDirection[index] === \"vertical\" && /*#__PURE__*/_jsxDEV(Arrow, {\n                  x: square[3] + 60,\n                  y: square[4] - 75,\n                  points: [0, 110, 0, 150],\n                  width: 30,\n                  pointerLength: 5,\n                  pointerWidth: 5,\n                  fill: \"black\",\n                  stroke: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 25\n                }, this), arrowDirection[index] === \"vertical\" && lineRenderArr.length !== 0 && lineRenderArr[index].map(pos => /*#__PURE__*/_jsxDEV(Line, {\n                  x: square[3],\n                  y: square[4],\n                  draggable: true,\n                  points: [pos, 0, pos, 32],\n                  stroke: square[2],\n                  strokeWidth: \"6\",\n                  dash: [10, 10]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 27\n                }, this)), arrowDirection[index] === \"horizantal\" && lineRenderArr.length !== 0 && lineRenderArr[index].map(pos => /*#__PURE__*/_jsxDEV(Line, {\n                  x: square[3],\n                  y: square[4],\n                  draggable: true,\n                  points: [0, pos, 32, pos],\n                  stroke: square[2],\n                  strokeWidth: \"6\",\n                  dash: [10, 10] // rotationDeg={90}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 323,\n                  columnNumber: 27\n                }, this)), arrowDirection[index] === \"horizantal\" && /*#__PURE__*/_jsxDEV(Rect, {\n                  x: square[3] + 60,\n                  y: square[4] - 75,\n                  draggable: true,\n                  stroke: square[2],\n                  strokeWidth: \"2\",\n                  rotationDeg: 132\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 25\n                }, this), arrowDirection[index] === \"horizantal\" && /*#__PURE__*/_jsxDEV(Arrow, {\n                  x: square[3] - 410,\n                  y: square[4] + 85,\n                  points: [472, 0, 500, 0],\n                  pointerLength: 5,\n                  pointerWidth: 5,\n                  fill: \"black\",\n                  stroke: \"black\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Rect, {\n                  onClick: e => {\n                    console.log(e.target.absolutePosition());\n                    console.log(e.target);\n                    console.log(\"lineRenderArr : \", lineRenderArr);\n                    console.log(\"squares : \", squares);\n                    let squaresOriginal = [...squares];\n                    squaresOriginal[index][3] = e.target.absolutePosition().x;\n                    squaresOriginal[index][4] = e.target.absolutePosition().y;\n                    setkonvasquares(squaresOriginal);\n                  },\n                  x: square[3],\n                  y: square[4],\n                  width: square[0] * 40,\n                  height: square[1] * 40,\n                  fill: square[2],\n                  opacity: 0.6 // stroke='black'\n                  // strokeWidth='4'\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 23\n                }, this), type === \"bottom\" && /*#__PURE__*/_jsxDEV(Rect, {\n                  draggable: true,\n                  x: square[3],\n                  y: square[4],\n                  width: width[index] * 40,\n                  height: length[index] * 40,\n                  fill: \"transparent\",\n                  stroke: square[2],\n                  draggable: false,\n                  strokeWidth: \"2\",\n                  dash: [10, 10]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Konva, \"PJ47MCXgIbhiMuuu246SkQlECUU=\");\n\n_c = Konva;\nexport default Konva;\n\nvar _c;\n\n$RefreshReg$(_c, \"Konva\");","map":{"version":3,"sources":["C:/fullstack/grass-calculator/grass-calculator/src/components/Konva.js"],"names":["React","useEffect","useState","Stage","Layer","Rect","Text","Group","Arrow","Line","Konva","squares","setsquares","type","tabKey","summary","xDirectionSquare","yDirectionSquare","resultForClientPchat","resultPchatWithDirection","resultMinChiburWithDirection","resultMinChiburNoDirection","arrayUsed","setarrayUsed","konvasquares","setkonvasquares","console","log","border","margin","borderRadius","window","innerWidth","innerHeight","map","square","index","width","length","arrowDirection","opt2","opt3","opt4","amount","e","target","absolutePosition","squaresOriginal","x","y","lineRenderArr","forEach","opt4Amount","opt3Amount","opt2Amount","squareLines","push","arr","pop","pos"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\r\n\r\nconst Konva = ({\r\n  squares,\r\n  setsquares,\r\n  type,\r\n  tabKey,\r\n  summary,\r\n  xDirectionSquare,\r\n  yDirectionSquare,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) => {\r\n  // {\r\n  //   opt4: { amount: 0, length: 0 },\r\n  //   opt3: { amount: 0, length: 0 },\r\n  //   opt2: { amount: 0, length: 0 },\r\n  //   pchat: 0,\r\n  // }\r\n  const [arrayUsed, setarrayUsed] = useState([]);\r\n  const [konvasquares, setkonvasquares] = useState(squares);\r\n\r\n  useEffect(() => {\r\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultMinChiburWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום פחת\") {\r\n      setarrayUsed(resultForClientPchat);\r\n    }\r\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום חיבורים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\r\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\r\n    console.log(\"arrayUsed : \", arrayUsed);\r\n  }, [tabKey]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Stage\r\n          style={{\r\n            border: \"1px solid #333\",\r\n            margin: \"3rem\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n          width={window.innerWidth / 2}\r\n          height={window.innerHeight / 2}\r\n        >\r\n          <Layer>\r\n            {type === \"top\" &&\r\n              squares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n\r\n                  // console.log(\"width : \", width);\r\n                  // console.log(\"length : \", length);\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={100}\r\n                          y={-45}\r\n                          points={[0, 110, 0, 150]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          fill='black'\r\n                          stroke='black'\r\n                        />\r\n                      )}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={-285}\r\n                          y={40}\r\n                          points={[472, 0, 500, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          fill='black'\r\n                          stroke='black'\r\n                        />\r\n                      )}\r\n\r\n                      <Text\r\n                        x={110}\r\n                        y={30}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={75}\r\n                        y={100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      />\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={50}\r\n                        y={100}\r\n                        width={square[0] * 40}\r\n                        height={square[1] * 40}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                        // stroke='black'\r\n                        // strokeWidth='4'\r\n                      />\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 40}\r\n                          height={length[index] * 40}\r\n                          fill='transparent'\r\n                          stroke={square[2]}\r\n                          draggable={false}\r\n                          strokeWidth='2'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n                      {type === \"bottom\" && (\r\n                        <Text\r\n                          x={square[3] + 20}\r\n                          y={square[4] + 10}\r\n                          text={`אורך דשא ${length[index]}`}\r\n                          fontSize={15}\r\n                          fill={\"black\"}\r\n                          rotationDeg={270}\r\n                        />\r\n                      )}\r\n                      {type === \"bottom\" && (\r\n                        <Text\r\n                          x={80}\r\n                          y={0}\r\n                          text={`רוחב דשא ${width[index]}`}\r\n                          fontSize={15}\r\n                          fill={\"black\"}\r\n                        />\r\n                      )}\r\n                      <Text\r\n                        x={120}\r\n                        y={80}\r\n                        text={`${index + 1}`}\r\n                        fontSize={15}\r\n                        fill={\"black\"}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n            {type === \"bottom\" &&\r\n              konvasquares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                //4 - 140\r\n                //3 - 105\r\n                //2 - 70\r\n                let lineRenderArr = [];\r\n\r\n                // let lineRenderArr = [\r\n                //   [157, 227, 335],\r\n                //   [80, 230],\r\n                // ];\r\n\r\n                arrayUsed.forEach((square) => {\r\n                  let opt4Amount = +square.opt4.amount;\r\n                  let opt3Amount = +square.opt3.amount;\r\n                  let opt2Amount = +square.opt2.amount;\r\n                  let squareLines = [];\r\n\r\n                  while (opt4Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 160\r\n                      );\r\n                    } else {\r\n                      squareLines.push(160);\r\n                    }\r\n                    opt4Amount--;\r\n                  }\r\n                  while (opt3Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 125\r\n                      );\r\n                    } else {\r\n                      squareLines.push(125);\r\n                    }\r\n                    opt3Amount--;\r\n                  }\r\n                  while (opt2Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 90\r\n                      );\r\n                    } else {\r\n                      squareLines.push(90);\r\n                    }\r\n                    opt2Amount--;\r\n                  }\r\n                  console.log(\"lineRenderArr : \", lineRenderArr);\r\n                  lineRenderArr.push(squareLines);\r\n                });\r\n\r\n                lineRenderArr.forEach((arr) => {\r\n                  arr.pop();\r\n                });\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n\r\n                  // console.log(\"width : \", width);\r\n                  // console.log(\"length : \", length);\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          points={[0, 110, 0, 150]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          fill='black'\r\n                          stroke='black'\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <Line\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            draggable={true}\r\n                            points={[pos, 0, pos, 32]}\r\n                            stroke={square[2]}\r\n                            strokeWidth='6'\r\n                            dash={[10, 10]}\r\n                          ></Line>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <Line\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            draggable={true}\r\n                            points={[0, pos, 32, pos]}\r\n                            stroke={square[2]}\r\n                            strokeWidth='6'\r\n                            dash={[10, 10]}\r\n                            // rotationDeg={90}\r\n                          ></Line>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Rect\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          draggable={true}\r\n                          stroke={square[2]}\r\n                          strokeWidth='2'\r\n                          rotationDeg={132}\r\n                        ></Rect>\r\n                      )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={square[3] - 410}\r\n                          y={square[4] + 85}\r\n                          points={[472, 0, 500, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          fill='black'\r\n                          stroke='black'\r\n                        />\r\n                      )}\r\n\r\n                      {/* <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      /> */}\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"lineRenderArr : \", lineRenderArr);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={square[3]}\r\n                        y={square[4]}\r\n                        width={square[0] * 40}\r\n                        height={square[1] * 40}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                        // stroke='black'\r\n                        // strokeWidth='4'\r\n                      />\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 40}\r\n                          height={length[index] * 40}\r\n                          fill='transparent'\r\n                          stroke={square[2]}\r\n                          draggable={false}\r\n                          strokeWidth='2'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n                      {/* {type === \"bottom\" && (\r\n                        <Text\r\n                          x={square[3] - 30}\r\n                          y={square[4] + 100}\r\n                          text={`אורך דשא ${length[index]}`}\r\n                          fontSize={15}\r\n                          fill={\"black\"}\r\n                          rotationDeg={270}\r\n                        />\r\n                      )} */}\r\n                      {/* {type === \"bottom\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          text={`רוחב דשא ${width[index]}`}\r\n                          fontSize={15}\r\n                          fill={\"black\"}\r\n                        />\r\n                      )} */}\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n"]},"metadata":{},"sourceType":"module"}
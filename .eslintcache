[{"C:\\fullstack\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\grass-calculator\\src\\App.js":"2","C:\\fullstack\\grass-calculator\\src\\reportWebVitals.js":"3","C:\\fullstack\\grass-calculator\\src\\pages\\Home.js":"4","C:\\fullstack\\grass-calculator\\src\\PchatWithDirection.js":"5","C:\\fullstack\\grass-calculator\\src\\minChiburNoDirection.js":"6","C:\\fullstack\\grass-calculator\\src\\minChiburWithDirection.js":"7","C:\\fullstack\\grass-calculator\\src\\chiburCalc.js":"8","C:\\fullstack\\grass-calculator\\src\\components\\Konva.js":"9","C:\\fullstack\\grass-calculator\\src\\components\\ControlledTabs.js":"10"},{"size":517,"mtime":1611178005604,"results":"11","hashOfConfig":"12"},{"size":382,"mtime":1611178005634,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1611178005587,"results":"14","hashOfConfig":"12"},{"size":20914,"mtime":1615724578102,"results":"15","hashOfConfig":"12"},{"size":774,"mtime":1611178005630,"results":"16","hashOfConfig":"12"},{"size":699,"mtime":1611178005601,"results":"17","hashOfConfig":"12"},{"size":718,"mtime":1611178005598,"results":"18","hashOfConfig":"12"},{"size":3290,"mtime":1611178005626,"results":"19","hashOfConfig":"12"},{"size":25114,"mtime":1611750595660,"results":"20","hashOfConfig":"12"},{"size":24171,"mtime":1615746256171,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"6ouatx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\fullstack\\grass-calculator\\src\\index.js",[],["45","46"],"C:\\fullstack\\grass-calculator\\src\\App.js",[],"C:\\fullstack\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\grass-calculator\\src\\pages\\Home.js",["47","48","49","50","51","52","53","54","55","56","57"],"C:\\fullstack\\grass-calculator\\src\\PchatWithDirection.js",["58","59","60","61"],"function PchatWithDirection(arrX, arrY) {\r\n  let resultX = arrX.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n  let resultY = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n\r\n  if (resultX === resultY) {\r\n    let resultXConnections = arrX.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n      \r\n    }, 0);\r\n\r\n    let resultYConnections = arrY.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n    }, 0);\r\n\r\n    if (resultXConnections >= resultYConnections) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  } else {\r\n    if (resultX > resultY) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PchatWithDirection;\r\n","C:\\fullstack\\grass-calculator\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\grass-calculator\\src\\minChiburWithDirection.js",[],"C:\\fullstack\\grass-calculator\\src\\chiburCalc.js",[],"C:\\fullstack\\grass-calculator\\src\\components\\Konva.js",["62","63","64"],"import React, { useEffect, useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\r\n\r\nconst Konva = ({\r\n  squares,\r\n  setsquares,\r\n  type,\r\n  tabKey,\r\n  summary,\r\n  xDirectionSquare,\r\n  yDirectionSquare,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) => {\r\n  const [arrayUsed, setarrayUsed] = useState([]);\r\n  const [konvasquares, setkonvasquares] = useState(squares);\r\n  const [isDragging, setisDragging] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultMinChiburWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום פחת\") {\r\n      setarrayUsed(resultForClientPchat);\r\n    }\r\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום חיבורים\") {\r\n      setarrayUsed(resultMinChiburNoDirection);\r\n    }\r\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\r\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\r\n    console.log(\"arrayUsed : \", arrayUsed);\r\n  }, [tabKey]);\r\n\r\n  function testFunc(e) {\r\n    console.log(e.target);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginTop: 30, overflowX: \"hidden\" }}>\r\n        <Stage\r\n          style={{\r\n            border: \"1px solid #333\",\r\n            marginLeft: \"5rem\",\r\n            marginRight: \"5rem\",\r\n            borderRadius: \"5px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        >\r\n          <Layer>\r\n            {type === \"top\" &&\r\n              squares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group\r\n                      onDragEnd={(e) => {\r\n                        console.log(e.target.absolutePosition());\r\n                        console.log(e.target);\r\n                        console.log(\"squares : \", squares);\r\n                        let squaresOriginal = [...squares];\r\n                        squaresOriginal[\r\n                          index\r\n                        ][3] = e.target.absolutePosition().x;\r\n                        squaresOriginal[\r\n                          index\r\n                        ][4] = e.target.absolutePosition().y;\r\n                        setkonvasquares(squaresOriginal);\r\n                      }}\r\n                      draggable\r\n                    >\r\n                      <Text\r\n                        offsetX={-70}\r\n                        offsetY={-100}\r\n                        text={` ${square[0]} רוחב`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        rotation={270}\r\n                        offsetX={170}\r\n                        offsetY={-50}\r\n                        text={` ${square[1]} אורך`}\r\n                        fontSize={15}\r\n                      />\r\n\r\n                      <Rect\r\n                        onClick={() => {\r\n                          console.log(isDragging);\r\n                        }}\r\n                        onDragMove={(e) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        onDragStart={(event) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        x={50}\r\n                        y={100}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n            {/* {end of top konva} */}\r\n\r\n            {type === \"bottom\" &&\r\n              konvasquares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                //4 - 140\r\n                //3 - 105\r\n                //2 - 70\r\n                let lineRenderArr = [];\r\n                let numberRenderArr = [];\r\n\r\n                arrayUsed.forEach((square) => {\r\n                  let opt4Amount = +square.opt4.amount;\r\n                  let opt3Amount = +square.opt3.amount;\r\n                  let opt2Amount = +square.opt2.amount;\r\n                  let squareLines = [];\r\n                  let renderedNumbers = [];\r\n\r\n                  while (opt4Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 110\r\n                      );\r\n                    } else {\r\n                      squareLines.push(110);\r\n                    }\r\n                    renderedNumbers.push(4);\r\n                    opt4Amount--;\r\n                  }\r\n                  while (opt3Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 95\r\n                      );\r\n                    } else {\r\n                      squareLines.push(95);\r\n                    }\r\n                    renderedNumbers.push(3);\r\n                    opt3Amount--;\r\n                  }\r\n                  while (opt2Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 30\r\n                      );\r\n                    } else {\r\n                      squareLines.push(30);\r\n                    }\r\n                    renderedNumbers.push(2);\r\n                    opt2Amount--;\r\n                  }\r\n                  console.log(\"lineRenderArr : \", lineRenderArr);\r\n                  lineRenderArr.push(squareLines);\r\n                  numberRenderArr.push(renderedNumbers);\r\n                });\r\n\r\n                lineRenderArr.forEach((arr) => {\r\n                  arr.pop();\r\n                });\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {/* {arrow direction } */}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-30}\r\n                          offsetY={30}\r\n                          points={[0, 45, 0, 70]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetY={-30}\r\n                          points={[30, 0, 50, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-25}\r\n                          offsetY={0}\r\n                          text={`אורך ${square[0]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          rotation={270}\r\n                          offsetX={80}\r\n                          offsetY={0}\r\n                          text={` אורך ${square[1]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n\r\n                      {/* {if arrow direction is vertical} */}\r\n\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Line\r\n                              x={square[3]}\r\n                              y={square[4]}\r\n                              draggable={true}\r\n                              points={[pos, 0, pos, 32]}\r\n                              stroke='darkgreen'\r\n                              strokeWidth='6'\r\n                              dash={[10, 10]}\r\n                            ></Line>\r\n\r\n                            {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                            lineRenderArr[index].length ? (\r\n                              <>\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos - 15\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos) + 1\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                  fill={\"black\"}\r\n                                />\r\n\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos + 50\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n\r\n                                {lineRenderArr[index].forEach((arr) =>\r\n                                  console.log(\"arr : \", arr)\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Text\r\n                                fontStyle='bold'\r\n                                textDecoration='underline'\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                offsetX={\r\n                                  arrayUsed[index].opt4.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt3.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt2.amount > 0\r\n                                    ? -pos + 50\r\n                                    : null\r\n                                }\r\n                                text={\r\n                                  \"גליל\" +\r\n                                  numberRenderArr[index][\r\n                                    lineRenderArr[index].indexOf(pos)\r\n                                  ]\r\n                                }\r\n                                fontSize={15}\r\n                              />\r\n                            )}\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            offsetX={-40}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n\r\n                      {/* {if arrow direction is horizantal} */}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Group>\r\n                              <Line\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                draggable={true}\r\n                                points={[0, pos, 32, pos]}\r\n                                stroke='darkgreen'\r\n                                strokeWidth='6'\r\n                                dash={[10, 10]}\r\n                              ></Line>\r\n                              {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                              lineRenderArr[index].length ? (\r\n                                <>\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos - 60\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos)\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos + 50\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos) + 1\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n                                </>\r\n                              ) : (\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  rotation={270}\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? pos - 70\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n                              )}\r\n                            </Group>\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            // offsetY={-40}\r\n                            offsetX={60}\r\n                            rotationDeg={270}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Rect\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          draggable={true}\r\n                          stroke={square[2]}\r\n                          strokeWidth='4'\r\n                          rotationDeg={132}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      /> */}\r\n                      {/* {if we are in konva bottom use also square for glilim} */}\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 30}\r\n                          height={length[index] * 30}\r\n                          fill='transparent'\r\n                          stroke='darkgreen'\r\n                          draggable={false}\r\n                          strokeWidth='4'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* {the original square from top} */}\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"lineRenderArr : \", lineRenderArr);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={square[3]}\r\n                        y={square[4]}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n","C:\\fullstack\\grass-calculator\\src\\components\\ControlledTabs.js",["65","66","67","68","69","70","71","72","73","74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":8},{"ruleId":"79","severity":1,"message":"83","line":10,"column":3,"nodeType":"81","messageId":"82","endLine":10,"endColumn":7},{"ruleId":"79","severity":1,"message":"84","line":12,"column":3,"nodeType":"81","messageId":"82","endLine":12,"endColumn":6},{"ruleId":"79","severity":1,"message":"85","line":13,"column":3,"nodeType":"81","messageId":"82","endLine":13,"endColumn":6},{"ruleId":"79","severity":1,"message":"86","line":14,"column":3,"nodeType":"81","messageId":"82","endLine":14,"endColumn":7},{"ruleId":"79","severity":1,"message":"87","line":15,"column":3,"nodeType":"81","messageId":"82","endLine":15,"endColumn":6},{"ruleId":"79","severity":1,"message":"88","line":16,"column":3,"nodeType":"81","messageId":"82","endLine":16,"endColumn":14},{"ruleId":"79","severity":1,"message":"89","line":18,"column":31,"nodeType":"81","messageId":"82","endLine":18,"endColumn":37},{"ruleId":"79","severity":1,"message":"90","line":113,"column":10,"nodeType":"81","messageId":"82","endLine":113,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":129,"column":6,"nodeType":"93","endLine":129,"endColumn":15,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":135,"column":6,"nodeType":"93","endLine":135,"endColumn":34,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":2,"column":43,"nodeType":"99","messageId":"100","endLine":2,"endColumn":45},{"ruleId":"97","severity":1,"message":"98","line":5,"column":43,"nodeType":"99","messageId":"100","endLine":5,"endColumn":45},{"ruleId":"97","severity":1,"message":"98","line":10,"column":56,"nodeType":"99","messageId":"100","endLine":10,"endColumn":58},{"ruleId":"97","severity":1,"message":"98","line":15,"column":56,"nodeType":"99","messageId":"100","endLine":15,"endColumn":58},{"ruleId":"91","severity":1,"message":"101","line":37,"column":6,"nodeType":"93","endLine":37,"endColumn":14,"suggestions":"102"},{"ruleId":"79","severity":1,"message":"103","line":39,"column":12,"nodeType":"81","messageId":"82","endLine":39,"endColumn":20},{"ruleId":"104","severity":1,"message":"105","line":555,"column":27,"nodeType":"106","endLine":555,"endColumn":44},{"ruleId":"79","severity":1,"message":"107","line":6,"column":3,"nodeType":"81","messageId":"82","endLine":6,"endColumn":13},{"ruleId":"79","severity":1,"message":"108","line":7,"column":3,"nodeType":"81","messageId":"82","endLine":7,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":8},{"ruleId":"79","severity":1,"message":"109","line":9,"column":3,"nodeType":"81","messageId":"82","endLine":9,"endColumn":7},{"ruleId":"79","severity":1,"message":"110","line":11,"column":3,"nodeType":"81","messageId":"82","endLine":11,"endColumn":12},{"ruleId":"79","severity":1,"message":"88","line":16,"column":3,"nodeType":"81","messageId":"82","endLine":16,"endColumn":14},{"ruleId":"79","severity":1,"message":"111","line":18,"column":21,"nodeType":"81","messageId":"82","endLine":18,"endColumn":36},{"ruleId":"79","severity":1,"message":"112","line":19,"column":9,"nodeType":"81","messageId":"82","endLine":19,"endColumn":14},{"ruleId":"91","severity":1,"message":"113","line":54,"column":6,"nodeType":"93","endLine":54,"endColumn":11,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":65,"column":36,"nodeType":"117","messageId":"118","endLine":65,"endColumn":37},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'CardColumns' is defined but never used.","'useRef' is defined but never used.","'titleColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection', 'bestMinChiburWithDirection', and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["122"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'arrayUsed', 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', 'resultPchatWithDirection', 'xDirectionSquare', and 'yDirectionSquare'. Either include them or remove the dependency array. If 'setarrayUsed' needs the current value of 'resultMinChiburWithDirection', you can also switch to useReducer instead of useState and read 'resultMinChiburWithDirection' in the reducer.",["123"],"'testFunc' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'useLayoutEffect' is defined but never used.","'Arrow' is defined but never used.","React Hook useEffect has missing dependencies: 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', and 'resultPchatWithDirection'. Either include them or remove the dependency array. If 'setArratUsed' needs the current value of 'resultForClientPchat', you can also switch to useReducer instead of useState and read 'resultForClientPchat' in the reducer.",["124"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"133","text":"134"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"135","text":"136"},"Update the dependencies array to be: [arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",{"range":"137","text":"138"},"Update the dependencies array to be: [key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",{"range":"139","text":"140"},[3727,3736],"[bestResult, squares, summary]",[3873,3901],"[bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",[1170,1178],"[arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",[1562,1567],"[key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]"]
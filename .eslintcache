<<<<<<< HEAD
[{"C:\\fullstack\\grass-calculator\\src\\index.js":"1","C:\\fullstack\\grass-calculator\\src\\App.js":"2","C:\\fullstack\\grass-calculator\\src\\reportWebVitals.js":"3","C:\\fullstack\\grass-calculator\\src\\pages\\Home.js":"4","C:\\fullstack\\grass-calculator\\src\\components\\ControlledTabs.js":"5","C:\\fullstack\\grass-calculator\\src\\PchatWithDirection.js":"6","C:\\fullstack\\grass-calculator\\src\\chiburCalc.js":"7","C:\\fullstack\\grass-calculator\\src\\minChiburNoDirection.js":"8","C:\\fullstack\\grass-calculator\\src\\minChiburWithDirection.js":"9","C:\\fullstack\\grass-calculator\\src\\components\\Konva.js":"10"},{"size":517,"mtime":1611178005604,"results":"11","hashOfConfig":"12"},{"size":382,"mtime":1611178005634,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1611178005587,"results":"14","hashOfConfig":"12"},{"size":16221,"mtime":1611560772241,"results":"15","hashOfConfig":"12"},{"size":21556,"mtime":1611705711296,"results":"16","hashOfConfig":"12"},{"size":774,"mtime":1611178005630,"results":"17","hashOfConfig":"12"},{"size":3290,"mtime":1611178005626,"results":"18","hashOfConfig":"12"},{"size":699,"mtime":1611178005601,"results":"19","hashOfConfig":"12"},{"size":718,"mtime":1611178005598,"results":"20","hashOfConfig":"12"},{"size":25083,"mtime":1611178005608,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"6ouatx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"C:\\fullstack\\grass-calculator\\src\\index.js",[],["47","48"],"C:\\fullstack\\grass-calculator\\src\\App.js",[],"C:\\fullstack\\grass-calculator\\src\\reportWebVitals.js",[],"C:\\fullstack\\grass-calculator\\src\\pages\\Home.js",["49","50","51","52","53","54","55","56","57","58"],"import \"../App.css\";\r\nimport Konva from \"../components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  Form,\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\n// import calculateBestOption from \"../calculator\";\r\nimport ChiburCalc from \"../chiburCalc\";\r\nimport PchatWithDirection from \"../PchatWithDirection\";\r\nimport MinChiburNoDirection from \"../minChiburNoDirection\";\r\nimport MinChiburWithDirection from \"../minChiburWithDirection\";\r\nimport ControlledTabs from \"../components/ControlledTabs\";\r\n\r\n////////////////////////////////////////////////////////////////////////\r\n\r\nfunction Home({ history }) {\r\n  //all squares entered\r\n  const [squares, setsquares] = useState([]);\r\n\r\n  //best result for client considering pchat only (\"pchat\" = loss)\r\n  const [resultForClientPchat, setresultForClientPchat] = useState([]);\r\n\r\n  //best result for client considering pchat and direction (\"direction\"= means - the direction the grass would streatch out )\r\n  const [resultPchatWithDirection, setresultPchatWithDirection] = useState([]);\r\n\r\n  //resultMinChiburNoDirection- \"Chibur\"= connection.\"no direction\"- not consider the grass direction)\r\n  const [resultMinChiburNoDirection, setResultMinChiburNoDirection] = useState(\r\n    []\r\n  );\r\n  //resultMinChiburWithDirection- \"Chibur\"= connection.\"no direction\"- not consider the grass direction)\r\n  const [\r\n    resultMinChiburWithDirection,\r\n    setResultMinChiburWithDirection,\r\n  ] = useState([]);\r\n\r\n  //best result for client considering connections only (\"connections\" means- the numbar of piece we use, sometimes the customer prefare to have los but not to have more pieces)\r\n  // considering the grass direction - giving solutions for each direction\r\n  //all x axis\r\n  const [x_directionResultForClient, setX_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //all y axis results\r\n  const [y_directionResultForClient, setY_DirectionResultForClient] = useState(\r\n    []\r\n  );\r\n\r\n  //summary state\r\n\r\n  const [summary, setSummary] = useState({\r\n    minPchatSummary: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n    minPchatWithDirectionSummary: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n    minChiburNoDirection: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n\r\n    minChiburWithDirection: {\r\n      opt2: 0,\r\n      opt2length: 0,\r\n      opt3: 0,\r\n      opt3length: 0,\r\n      opt4: 0,\r\n      opt4length: 0,\r\n      pchat: 0,\r\n    },\r\n  });\r\n\r\n  //input values\r\n  const [width, setwidth] = useState(0);\r\n  const [length, setlength] = useState(0);\r\n\r\n  //squares color\r\n  const [color, setColor] = useState(getRandomColour());\r\n  const [titleColor, setTitleColor] = useState(getRandomColour());\r\n\r\n  function getRandomColour() {\r\n    var red = Math.floor(Math.random() * 255);\r\n    var green = Math.floor(Math.random() * 255);\r\n    var blue = Math.floor(Math.random() * 255);\r\n\r\n    return \"rgb(\" + red + \",\" + green + \",\" + blue + \" )\";\r\n  }\r\n\r\n  const [openSummary, setopenSummary] = useState(false);\r\n  const [display, setDisplay] = useState(false);\r\n\r\n  useEffect(() => {\r\n    bestResult();\r\n    console.log(\"summary : \", summary);\r\n  }, [squares]);\r\n\r\n  useEffect(() => {\r\n    bestResultPchatWithDirection();\r\n    bestMinChiburNoDirection();\r\n    bestMinChiburWithDirection();\r\n  }, [x_directionResultForClient]);\r\n\r\n  function bestMinChiburWithDirection() {\r\n    let result5 = MinChiburWithDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n    console.log(\"result5:\", result5);\r\n    setResultMinChiburWithDirection(result5);\r\n  }\r\n\r\n  function bestMinChiburNoDirection() {\r\n    let result4 = MinChiburNoDirection(\r\n      x_directionResultForClient,\r\n      y_directionResultForClient\r\n    );\r\n\r\n    setResultMinChiburNoDirection(result4);\r\n  }\r\n\r\n  // function bestResultPchatWithDirection() {\r\n  //   let result3 = PchatWithDirection(\r\n  //     x_directionResultForClient,\r\n  //     y_directionResultForClient\r\n  //   );\r\n\r\n  //   setresultPchatWithDirection(result3);\r\n  // }\r\n\r\n  function bestResultPchatWithDirection() {\r\n    if (squares.length === 1) {\r\n      setresultPchatWithDirection(resultForClientPchat);\r\n    } else {\r\n      let result3 = PchatWithDirection(\r\n        x_directionResultForClient,\r\n        y_directionResultForClient\r\n      );\r\n\r\n      setresultPchatWithDirection(result3);\r\n    }\r\n  }\r\n\r\n  function summaryAllOptions() {\r\n    // \"P\"=Pchat. not considering the direction\r\n    let opt2AmountP = 0;\r\n    let opt2lengthP = 0;\r\n    let opt3AmountP = 0;\r\n    let opt3lengthP = 0;\r\n    let opt4AmountP = 0;\r\n    let opt4lengthP = 0;\r\n    let pchatP = 0;\r\n    resultForClientPchat.forEach((square) => {\r\n      opt2AmountP += square.opt2.amount;\r\n      opt2lengthP += square.opt2.length * square.opt2.amount;\r\n      opt3AmountP += square.opt3.amount;\r\n      opt3lengthP += square.opt3.length * square.opt3.amount;\r\n      opt4AmountP += square.opt4.amount;\r\n      opt4lengthP += square.opt4.length * square.opt4.amount;\r\n      pchatP += square.pchat;\r\n    });\r\n    // \"PD\"=Pchat+ considering the Direction\r\n    let opt2AmountPD = 0;\r\n    let opt2lengthPD = 0;\r\n    let opt3AmountPD = 0;\r\n    let opt3lengthPD = 0;\r\n    let opt4AmountPD = 0;\r\n    let opt4lengthPD = 0;\r\n    let pchatPD = 0;\r\n\r\n    resultPchatWithDirection.forEach((square) => {\r\n      opt2AmountPD += square.opt2.amount;\r\n      opt2lengthPD += square.opt2.length * square.opt2.amount;\r\n      opt3AmountPD += square.opt3.amount;\r\n      opt3lengthPD += square.opt3.length * square.opt3.amount;\r\n      opt4AmountPD += square.opt4.amount;\r\n      opt4lengthPD += square.opt4.length * square.opt4.amount;\r\n      pchatPD += square.pchat;\r\n    });\r\n    // result  of Min \"Chiburim\" (connections) Not consider Direction\r\n    let opt2AmountC = 0;\r\n    let opt2lengthC = 0;\r\n    let opt3AmountC = 0;\r\n    let opt3lengthC = 0;\r\n    let opt4AmountC = 0;\r\n    let opt4lengthC = 0;\r\n    let pchatC = 0;\r\n\r\n    resultMinChiburNoDirection.forEach((square) => {\r\n      opt2AmountC += square.opt2.amount;\r\n      opt2lengthC += square.opt2.length * square.opt2.amount;\r\n      opt3AmountC += square.opt3.amount;\r\n      opt3lengthC += square.opt3.length * square.opt3.amount;\r\n      opt4AmountC += square.opt4.amount;\r\n      opt4lengthC += square.opt4.length * square.opt4.amount;\r\n      pchatC += square.pchat;\r\n    });\r\n\r\n    // result  of Min \"Chiburim\" (connections) + consider Direction\r\n    let opt2AmountCD = 0;\r\n    let opt2lengthCD = 0;\r\n    let opt3AmountCD = 0;\r\n    let opt3lengthCD = 0;\r\n    let opt4AmountCD = 0;\r\n    let opt4lengthCD = 0;\r\n    let pchatCD = 0;\r\n\r\n    resultMinChiburWithDirection.forEach((square, index) => {\r\n      opt2AmountCD += square.opt2.amount;\r\n      opt2lengthCD += square.opt2.length * square.opt2.amount;\r\n      opt3AmountCD += square.opt3.amount;\r\n      opt3lengthCD += square.opt3.length * square.opt3.amount;\r\n      opt4AmountCD += square.opt4.amount;\r\n      opt4lengthCD += square.opt4.length * square.opt4.amount;\r\n      pchatCD += square.pchat;\r\n    });\r\n\r\n    setSummary({\r\n      ...summary,\r\n      minPchatSummary: {\r\n        title: `מינימום פחת`,\r\n        description: `ניצול מירבי של גלילי הדשא שהזומנו`,\r\n        opt2: opt2AmountP,\r\n        opt2length: opt2lengthP,\r\n        opt3: opt3AmountP,\r\n        opt3length: opt3lengthP,\r\n        opt4: opt4AmountP,\r\n        opt4length: opt4lengthP,\r\n        pchat: pchatP.toFixed(2),\r\n      },\r\n      minPchatWithDirectionSummary: {\r\n        title: `מינימום פחת + כיוון סיב אחיד בין הגלילים`,\r\n        description:\r\n          \"  ניצול מירבי של גלילי הדשא שהוזמנו בתנאי של שמירה על כיוון פריסה אחיד של כל הגלילים\",\r\n        opt2: opt2AmountPD,\r\n        opt2length: opt2lengthPD,\r\n        opt3: opt3AmountPD,\r\n        opt3length: opt3lengthPD,\r\n        opt4: opt4AmountPD,\r\n        opt4length: opt4lengthPD,\r\n        pchat: pchatPD.toFixed(2),\r\n      },\r\n      minChiburNoDirection: {\r\n        title: \"מינימום חיבורים\",\r\n        description: \"כיסוי השטח עם מספר מינימלי של גלילי דשא סינטטי \",\r\n        opt2: opt2AmountC,\r\n        opt2length: opt2lengthC,\r\n        opt3: opt3AmountC,\r\n        opt3length: opt3lengthC,\r\n        opt4: opt4AmountC,\r\n        opt4length: opt4lengthC,\r\n        pchat: pchatC.toFixed(2),\r\n      },\r\n      minChiburWithDirection: {\r\n        title: `מינימום חיבורים + כיוון סיב אחיד בין הגלילים`,\r\n        description: `מינימום חיבורים + כיוון סיב אחיד בין הגלילים`,\r\n        opt2: opt2AmountCD,\r\n        opt2length: opt2lengthCD,\r\n        opt3: opt3AmountCD,\r\n        opt3length: opt3lengthCD,\r\n        opt4: opt4AmountCD,\r\n        opt4length: opt4lengthCD,\r\n        pchat: pchatCD.toFixed(2),\r\n      },\r\n    });\r\n  }\r\n\r\n  function bestResult() {\r\n    squares.forEach((square) => {\r\n      //  פחת מינימלי בלי כיוון פריסה\r\n      // min pchat no direction consider\r\n\r\n      let result1 = ChiburCalc(square[0], square[1], square[2]);\r\n      let result2 = ChiburCalc(square[1], square[0], square[2]);\r\n      if (result1.pchat === result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else if (result1.pchat < result2.pchat) {\r\n        setresultForClientPchat([...resultForClientPchat, result1]);\r\n      } else {\r\n        let inputLength = result2.initialWidth;\r\n        let inputWidth = result2.initialLength;\r\n        result2.initialWidth = inputWidth;\r\n        result2.initialLength = inputLength;\r\n        setresultForClientPchat([...resultForClientPchat, result2]);\r\n      }\r\n\r\n      // כיוון פריסה\r\n      setX_DirectionResultForClient([...x_directionResultForClient, result1]);\r\n      let inputLength = result2.initialWidth;\r\n      let inputWidth = result2.initialLength;\r\n      result2.initialWidth = inputWidth;\r\n      result2.initialLength = inputLength;\r\n      setY_DirectionResultForClient([...y_directionResultForClient, result2]);\r\n    });\r\n\r\n    summaryAllOptions();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='App'>\r\n        <Container>\r\n          <InputGroup\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"flex-end\",\r\n            }}\r\n            className=' mt-5  '\r\n          >\r\n            <h1 style={{ textAlign: \"right\" }}> מחשבון דשא סינטטי</h1>\r\n            <span>\r\n              יש להזין נתוני אורך ורוחב עבור כל משטח שמיועד לכיסוי בדשא\r\n            </span>\r\n            <span>לאחר מכן יש לבחור בכפתור הוסף מלבן </span>\r\n            <span>\r\n              במידה וישנו משטח נוסף לכיסוי יש לחזור על התהליך ולהוסיף מלבן נוסף{\" \"}\r\n            </span>\r\n            <span>\r\n              לאחר הזנת כל המשטחים יש להקיש חשב ולגלול לתחתית המסך על מנת לראות\r\n              את האפשרויות המוצעות\r\n            </span>\r\n            <span>ניתן לגרור את המשטחים בעזרת העכבר על מנת לדמות את השטח</span>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n              }}\r\n            >\r\n              <div\r\n                className='buttons'\r\n                style={{ display: \"flex\", flexDirection: \"row-reverse\" }}\r\n              >\r\n                <Button\r\n                  disabled={display}\r\n                  size='sm'\r\n                  onClick={() => {\r\n                    setColor(getRandomColour());\r\n                    setTitleColor(getRandomColour());\r\n                    setsquares([...squares, [+width, +length, color, 100, 50]]);\r\n                    setwidth(\"\");\r\n                    setlength(\"\");\r\n                    summaryAllOptions();\r\n                  }}\r\n                  className='m-3'\r\n                  variant='success'\r\n                >\r\n                  הוסף מלבן\r\n                </Button>\r\n                <Button\r\n                  disabled={display}\r\n                  size='sm'\r\n                  className='m-3'\r\n                  variant='success'\r\n                  onClick={() => {\r\n                    setopenSummary(true);\r\n                    setDisplay(true);\r\n                    summaryAllOptions();\r\n                  }}\r\n                >\r\n                  חשב\r\n                </Button>\r\n                <Button\r\n                  size='sm'\r\n                  onClick={() => {\r\n                    setsquares([]);\r\n                    setresultForClientPchat([]);\r\n                    setSummary([]);\r\n                    setwidth(0);\r\n                    setlength(0);\r\n                    setResultMinChiburNoDirection([]);\r\n                    setResultMinChiburWithDirection([]);\r\n                    setX_DirectionResultForClient([]);\r\n                    setY_DirectionResultForClient([]);\r\n                    setresultPchatWithDirection([]);\r\n                    setopenSummary(false);\r\n                    setDisplay(false);\r\n                  }}\r\n                  className='m-3'\r\n                  variant='success'\r\n                >\r\n                  נקה\r\n                </Button>\r\n              </div>\r\n              <div>\r\n                <Form.Label>\r\n                  <strong style={{ textAlign: \"right\" }}> רוחב במטרים</strong>\r\n                </Form.Label>\r\n                <FormControl\r\n                  value={width}\r\n                  style={{\r\n                    height: \"2rem\",\r\n                    direction: \"rtl\",\r\n                    maxHeight: \"2rem\",\r\n                  }}\r\n                  aria-label='Default'\r\n                  aria-describedby='inputGroup-sizing-default'\r\n                  id='width'\r\n                  onChange={(e) => {\r\n                    setwidth(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Form.Label>\r\n                  <strong>אורך מטרים</strong>\r\n                </Form.Label>\r\n                <FormControl\r\n                  value={length}\r\n                  style={{ direction: \"rtl\", maxHeight: \"2rem\" }}\r\n                  aria-label='Default'\r\n                  aria-describedby='inputGroup-sizing-default'\r\n                  id='length'\r\n                  onChange={(e) => {\r\n                    setlength(e.target.value);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </InputGroup>\r\n        </Container>\r\n      </div>\r\n      <Konva type='top' squares={squares} setsquares={setsquares} />\r\n\r\n      <hr></hr>\r\n\r\n      {openSummary && (\r\n        <div className='summary'>\r\n          <h3\r\n            style={{\r\n              textAlign: \"right\",\r\n              marginRight: \"3rem\",\r\n              marginBottom: \"3rem\",\r\n            }}\r\n          >\r\n            אלו התוצאות האפשריות עבורכם - יש לבחור את האפשרות המועדפת\r\n          </h3>\r\n\r\n          <ControlledTabs\r\n            summary={summary}\r\n            x_directionResultForClient={x_directionResultForClient}\r\n            y_directionResultForClient={y_directionResultForClient}\r\n            resultForClientPchat={resultForClientPchat}\r\n            squares={squares}\r\n            setsquares={setsquares}\r\n            resultPchatWithDirection={resultPchatWithDirection}\r\n            resultMinChiburWithDirection={resultMinChiburWithDirection}\r\n            resultMinChiburNoDirection={resultMinChiburNoDirection}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\fullstack\\grass-calculator\\src\\components\\ControlledTabs.js",["59","60","61","62","63","64","65","66","67","68"],"import \"../App.css\";\r\nimport Konva from \"../components/Konva\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Button,\r\n  InputGroup,\r\n  FormControl,\r\n  Modal,\r\n  Form,\r\n  Card,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n  CardColumns,\r\n} from \"react-bootstrap\";\r\nimport { useEffect, useLayoutEffect, useState } from \"react\";\r\n\r\nexport default function ControlledTabs({\r\n  summary,\r\n  squares,\r\n  setsquares,\r\n  x_directionResultForClient,\r\n  y_directionResultForClient,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) {\r\n  const [key, setKey] = useState(\r\n    \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\"\r\n  );\r\n  const [perutTitle, setPerutTitle] = useState(\r\n    \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\"\r\n  );\r\n  const [arrayUsed, setArratUsed] = useState(resultMinChiburWithDirection);\r\n\r\n  useEffect(() => {\r\n    if (key === \"מינימום פחת\") {\r\n      setArratUsed(resultForClientPchat);\r\n    } else if (key === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setArratUsed(resultPchatWithDirection);\r\n    } else if (key === \"מינימום חיבורים\") {\r\n      setArratUsed(resultMinChiburNoDirection);\r\n    } else if (key === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setArratUsed(resultMinChiburWithDirection);\r\n    }\r\n  }, [key]);\r\n\r\n  return (\r\n    <>\r\n      <Tabs\r\n        className='tabs'\r\n        id='controlled-tab'\r\n        activeKey={key}\r\n        onSelect={(k) => (setKey(k), setPerutTitle(k))}\r\n      >\r\n        {Object.entries(summary).map(([objKey, value], i) => (\r\n          // {/* <Tab eventKey=\"מינימום פחת + כיוון סיב אחיד\" title= \"מינימום פחת + כיוון סיב אחיד\"> */}\r\n          <Tab eventKey={value.title} title={value.title}>\r\n            {/* <Container style={{ textAlign: \"right\", display:\"flex\", flexDirection:\"column\", alignItems:\"center\"}}> */}\r\n            <Row style={{ direction: \"rtl\", margin: \"0 20px\" }}>\r\n              <h2> סה\"כ להזמנה </h2>{\" \"}\r\n              <h3> (לצפיה בפירוט יש לגלול לתחתית המסך) </h3>\r\n              <Card\r\n                className='mr-5 mt-5 '\r\n                border='secondary'\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <Card.Body>\r\n                  <Row md={12}>\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> גלילים ברוחב 2 מטר</strong> <hr></hr>\r\n                        {value.opt2 > 25 ? (\r\n                          <>\r\n                              <p> סהכ אורך:{value.opt2length.toFixed(2)} מטר.</p>\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt2length / 25)} גלילים.</p>\r\n                            {value.opt2length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(value.opt2* value.opt2length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        ) : value.opt2length>0 ? (\r\n                          <>\r\n                            <p>גליל אחד</p>\r\n                            <p> באורך: {value.opt2length} מטר </p>\r\n                          </>\r\n                        ) : null}\r\n                        {value.opt2 ? <br></br> : null}\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> גלילים ברוחב 3 מטר</strong> <hr></hr>\r\n                        {value.opt3 > 25 ? (\r\n                          <>\r\n                            <p> סהכ אורך:{value.opt3length.toFixed(2)} מטר.</p>\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt3length / 25)} גלילים.</p>\r\n                            \r\n                            {value.opt3length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(value.opt3* value.opt3length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                     \r\n                        ) : ( value.opt3length>0? <>\r\n                            <p>גליל אחד.</p>\r\n                         <p> באורך: {(value.opt3length)} מטר. </p>\r\n                          </> : null)\r\n                        }\r\n                          \r\n                                                                                                  \r\n                         {value.opt3 ? <br></br> : null}\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <>\r\n                        {console.log(\"value.opt4length:\", value.opt4length)}\r\n\r\n                          <strong> גלילים ברוחב 4 מטר</strong> <hr></hr>\r\n                        </>\r\n                      \r\n                        {value.opt4length >= 25 ? (\r\n                          <>             \r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(value.opt4length / 25)} גלילים.</p>\r\n                            {value.opt4length % 25 ? (\r\n                              <p> ובנוסף גליל באורך  {(value.opt4length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        ) : value.opt4length < 25 ?\r\n                            <>\r\n                            {value.opt4 > 0 ?( \r\n                                <>\r\n                                  <p>כמות:גליל אחד</p>\r\n                                  <p> באורך: {(value.opt4length)} מטר. </p>\r\n                                </>) : null\r\n                            } </>\r\n                            : null }\r\n                          \r\n                                                                                                  \r\n                         {value.opt4 ? <br></br> : null}\r\n                      </Card.Text>\r\n                    </Col>\r\n\r\n                    <Col md={3}>\r\n                      <Card.Text style={{ textAlign: \"right\" }}>\r\n                        <strong> סה\"כ פחת </strong>\r\n                        <hr></hr>\r\n         {value.pchat>0 ?\r\n                        <span> {(+value.pchat).toFixed(2)} מ\"ר.</span>\r\n                        // <br></br>\r\n                      : <span> אין פחת</span>}\r\n                      </Card.Text>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Body>\r\n              </Card>\r\n            </Row>\r\n\r\n            <Row>\r\n              <Col md={12}>\r\n                <Konva\r\n                  yDirectionSquare={y_directionResultForClient}\r\n                  xDirectionSquare={x_directionResultForClient}\r\n                  resultForClientPchat={resultForClientPchat}\r\n                  resultPchatWithDirection={resultPchatWithDirection}\r\n                  resultMinChiburWithDirection={resultMinChiburWithDirection}\r\n                  resultMinChiburNoDirection={resultMinChiburNoDirection}\r\n                  summary={summary}\r\n                  tabKey={key}\r\n                  squares={squares}\r\n                  setsquares={setsquares}\r\n                  type='bottom'\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {/* </Container> */}\r\n          </Tab>\r\n        ))}\r\n      </Tabs>\r\n\r\n      <h1 className='tabs' style={{ textAlign: \"right\", marginTop: \"40px\" }}>\r\n        פירוט - {perutTitle}\r\n      </h1>\r\n\r\n      {/* {key === \"מינימום פחת\" && ( */}\r\n        <>\r\n          {/* <strong>מינימום פחת-פירוט</strong><br></br> */}\r\n\r\n          <Row className='m-3'>\r\n            {arrayUsed.map((square, index) => {\r\n              return (\r\n                <>\r\n                  <Col md={3} style={{ margin: \"1rem\" }}>\r\n                    <Card\r\n                      border='dark'\r\n                      //  bg={'secondary'}\r\n                      // bg={variant.toLowerCase()}\r\n                      // key={idx}\r\n                      // text={variant.toLowerCase() === 'light' ? 'dark' : 'white'}\r\n                      text={\"black\"}\r\n                      style={{ width: \"18rem\" }}\r\n                    >\r\n                      <Card.Header style={{ background: `${square.color}` }}>\r\n                        <h1> מלבן מספר {index + 1} </h1>\r\n                        אורך: {square.initialLength}מטר רוחב:\r\n                        {square.initialWidth}מטר\r\n                      </Card.Header>\r\n                      <Card.Text className='perutCardText'>\r\n\r\n                        {square.opt4.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 4 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt4.amount} גלילים.</p>\r\n                            <p>אורך : {square.opt4.length} מטר לכל גליל.</p>\r\n                          </>) : null}\r\n                        \r\n                        {square.opt4.amount > 1 && square.opt4.length*square.opt4.amount < 25 ? (\r\n                          <>\r\n                            <p>סה\"כ: גליל אחד באורך  {square.opt4.length*square.opt4.amount} מטר. \r\n                            </p>\r\n                          </>\r\n                        ) : null}\r\n                        \r\n                          {square.opt4.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n\r\n                            <p> כמות גלילים באורך 25 מטר:   {Math.floor(square.opt4.length*square.opt4.amount / 25)} גלילים. </p>\r\n                            {square.opt4.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt4.amount * square.opt4.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt4.amount * square.opt4.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n                          <p>{Math.floor(square.opt4.amount * square.opt4.length / 25)}גלילים מלאים(באורך 25 מטר).</p>\r\n                          {Math.floor(square.opt4.length / 25) > 0 ?\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:\r\n                            {Math.floor(square.opt4.length / 25)}\r\n                          </p> : null}\r\n                          {square.opt4.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {((square.opt4.amount * square.opt4.length) % 25).toFixed(2)} מטר\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt4.amount * square.opt4.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 4 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:\r\n                            {Math.floor(\r\n                              (square.opt4.amount * square.opt4.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt4.amount * square.opt4.length) % 25 ? (\r\n                            <>\r\n                            <p>ובנוסף גליל באורך {(square.opt4.amount * square.opt4.length % 25).toFixed(2)} מטר.</p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n                                                                                                  \r\n                         {square.opt4.amount ? <br></br> : null}\r\n\r\n                        \r\n                         {square.opt3.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 3 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt3.amount} גלילים.</p>\r\n                            <p>אורך : {square.opt3.length} מטר לכל גליל.</p>\r\n                          </>) : null}\r\n                        \r\n                          {square.opt3.amount > 1 && square.opt3.length*square.opt3.amount < 25 ? (\r\n                          <>\r\n                            <p>סה\"כ: גליל אחד באורך  {square.opt3.length*square.opt3.amount} מטר. \r\n                            </p>\r\n                          </>\r\n                        ) : null}\r\n                          \r\n                        {square.opt3.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n\r\n                            <p>   {Math.floor(square.opt3.length*square.opt3.amount / 25)}גלילים מלאים(באורך 25 מטר).</p>\r\n                            {square.opt3.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt3.amount * square.opt3.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt3.amount * square.opt3.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n                          <p> {Math.floor(square.opt3.amount * square.opt3.length / 25)} גלילים מלאים(באורך 25 מטר).</p>\r\n\r\n                          <p>\r\n                            {\" \"}\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(square.opt3.length / 25)}{\" \"}\r\n                          </p>\r\n                          {square.opt3.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {((square.opt3.amount * square.opt3.length) % 25).toFixed(2)}{\" \"}\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt3.amount * square.opt3.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 3 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(\r\n                              (square.opt3.amount * square.opt3.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt3.amount * square.opt3.length) % 25 ? (\r\n                            <>\r\n                           \r\n                            <p>ובנוסף גליל באורך {(square.opt3.amount * square.opt3.length % 25).toFixed(2)} מטר. </p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n\r\n                      \r\n                        {square.opt3.amount ? <br></br> : null}\r\n\r\n\r\n\r\n\r\n                        \r\n                        {square.opt2.amount ? (\r\n                          <>\r\n                            <strong> גלילים ברוחב 2 מטר</strong> <hr></hr>\r\n                            <p>כמות : {square.opt2.amount} גלילים.</p>\r\n                            <p>אורך : {square.opt2.length} מטר לכל גליל.</p>\r\n                          </>) : null}\r\n                        \r\n                          {square.opt2.amount > 1 && square.opt2.length*square.opt2.amount < 25 ? (\r\n                          <>\r\n                            <p>סה\"כ: גליל אחד באורך  {square.opt2.length*square.opt2.amount} מטר. \r\n                            </p>\r\n                          </>\r\n                        ) : null}\r\n                          \r\n                        {square.opt2.length > 25 ? (\r\n                          <>\r\n                                                      <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n\r\n                            <p>  {Math.floor(square.opt2.length*square.opt2.amount/ 25)} גלילים מלאים(באורך 25 מטר).</p>\r\n                            {square.opt2.length % 25 ? (\r\n                            <p>ובנוסף גליל באורך {(square.opt2.amount * square.opt2.length % 25).toFixed(2)} מטר.</p>\r\n\r\n                            ) : null}\r\n                          </>\r\n                        // ) : null}\r\n                        ) : \r\n                        square.opt2.amount * square.opt2.length >= 25  ? (\r\n                          <>\r\n                          <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n                          <p>  {Math.floor(square.opt2.amount * square.opt2.length / 25)} מטר.</p>\r\n\r\n                          <p>\r\n                            {\" \"}\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(square.opt2.length / 25)}{\" \"}\r\n                          </p>\r\n                          {square.opt2.length % 25 ? (\r\n                            <p>\r\n                              ובנוסף גליל באורך{\" \"}\r\n                              {((square.opt2.amount * square.opt2.length) % 25).toFixed(2)}{\" \"}\r\n                            </p>\r\n                          ) : null}\r\n                        </>\r\n                      ) : // ) : null}\r\n                      square.opt2.amount * square.opt2.length >= 25 ? (\r\n                        <>\r\n                          <strong>סה\"כ גלילים של 2 להזמנה</strong>\r\n                          <p>\r\n                            כמות גלילים באורך 25 מטר:{\" \"}\r\n                            {Math.floor(\r\n                              (square.opt2.amount * square.opt2.length) / 25\r\n                            )}\r\n                          </p>\r\n\r\n                          {(square.opt2.amount * square.opt2.length) % 25 ? (\r\n                            <>\r\n                             <p>ובנוסף גליל באורך {(square.opt2.amount * square.opt2.length % 25).toFixed(2)} מטר.</p>\r\n                            </>\r\n                            ):null}\r\n                              \r\n                          </>) : null}\r\n                          \r\n\r\n                      \r\n                        {square.opt2.amount ? <br></br> : null}\r\n\r\n\r\n                        \r\n                        {square.pchat ? (\r\n                          <>\r\n                            <strong>\r\n                              פחת<hr></hr>\r\n                            </strong>\r\n                            <p>סה\"כ   {square.pchat} מ\"ר.</p>\r\n                            <hr></hr>\r\n                            {/* <strong>פירוט פחת</strong>  <hr></hr>\r\n                            <>\r\n                              {square.opt4.amount && square.opt4.amount * 4-square.initialWidth-square.opt3.amount * 3-square.opt2.amount * 2 > 0 ? (\r\n                              <p> {square.opt4.length} מטר על {(square.opt4.amount * 4-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</> \r\n                            <>\r\n                            {square.opt3.amount && square.opt3.amount * 3-square.initialWidth-square.opt4.amount * 4-square.opt2.amount * 2 > 0 ? (\r\n                              <p> 3 מטר על {(square.opt3.amount * 3-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</> \r\n                            <>\r\n                            {square.opt2.amount && square.opt2.amount * 2-square.initialWidth-square.opt3.amount * 3-square.opt4.amount * 4 > 0 ? (\r\n                              <p> 2 מטר על {(square.opt2.amount * 2-square.initialWidth).toFixed(1)} מטר    </p>\r\n                        ):null }</>  */}\r\n                                \r\n                           \r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <strong>\r\n                              אין פחת<hr></hr>\r\n                            </strong>\r\n                          </>\r\n                        )}\r\n                      </Card.Text>\r\n                    </Card>\r\n                  </Col>\r\n                </>\r\n              );\r\n            })}\r\n          </Row>\r\n      </>\r\n\r\n      {/* ) */}\r\n      {/* } */}\r\n    </>\r\n  );\r\n}\r\n","C:\\fullstack\\grass-calculator\\src\\PchatWithDirection.js",["69","70","71","72"],"function PchatWithDirection(arrX, arrY) {\r\n  let resultX = arrX.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n  let resultY = arrY.reduce((acc, curVal) => {\r\n    acc += curVal.pchat;\r\n  }, 0);\r\n\r\n  if (resultX === resultY) {\r\n    let resultXConnections = arrX.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n      \r\n    }, 0);\r\n\r\n    let resultYConnections = arrY.reduce((acc, curVal) => {\r\n      acc += curVal.opt2 + curVal.opt3 + curVal.opt4;\r\n    }, 0);\r\n\r\n    if (resultXConnections >= resultYConnections) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  } else {\r\n    if (resultX > resultY) {\r\n      return arrY;\r\n    } else {\r\n      return arrX;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PchatWithDirection;\r\n","C:\\fullstack\\grass-calculator\\src\\chiburCalc.js",[],"C:\\fullstack\\grass-calculator\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\grass-calculator\\src\\minChiburWithDirection.js",[],"C:\\fullstack\\grass-calculator\\src\\components\\Konva.js",["73","74","75"],"import React, { useEffect, useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\r\n\r\nconst Konva = ({\r\n  squares,\r\n  setsquares,\r\n  type,\r\n  tabKey,\r\n  summary,\r\n  xDirectionSquare,\r\n  yDirectionSquare,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) => {\r\n  const [arrayUsed, setarrayUsed] = useState([]);\r\n  const [konvasquares, setkonvasquares] = useState(squares);\r\n  const [isDragging, setisDragging] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultMinChiburWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום פחת\") {\r\n      setarrayUsed(resultForClientPchat);\r\n    }\r\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום חיבורים\") {\r\n      setarrayUsed(resultMinChiburNoDirection);\r\n    }\r\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\r\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\r\n    console.log(\"arrayUsed : \", arrayUsed);\r\n  }, [tabKey]);\r\n\r\n  function testFunc(e) {\r\n    console.log(e.target);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginTop: 30 }}>\r\n        <Stage\r\n          style={{\r\n            border: \"1px solid #333\",\r\n            marginLeft: \"5rem\",\r\n            marginRight: \"5rem\",\r\n            borderRadius: \"5px\",\r\n          }}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        >\r\n          <Layer>\r\n            {type === \"top\" &&\r\n              squares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group\r\n                      onDragEnd={(e) => {\r\n                        console.log(e.target.absolutePosition());\r\n                        console.log(e.target);\r\n                        console.log(\"squares : \", squares);\r\n                        let squaresOriginal = [...squares];\r\n                        squaresOriginal[\r\n                          index\r\n                        ][3] = e.target.absolutePosition().x;\r\n                        squaresOriginal[\r\n                          index\r\n                        ][4] = e.target.absolutePosition().y;\r\n                        setkonvasquares(squaresOriginal);\r\n                      }}\r\n                      draggable\r\n                    >\r\n                      <Text\r\n                        offsetX={-70}\r\n                        offsetY={-100}\r\n                        text={` ${square[0]} רוחב`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        rotation={270}\r\n                        offsetX={170}\r\n                        offsetY={-50}\r\n                        text={` ${square[1]} אורך`}\r\n                        fontSize={15}\r\n                      />\r\n                    \r\n\r\n                      <Rect\r\n                        onClick={() => {\r\n                          console.log(isDragging);\r\n                        }}\r\n                        onDragMove={(e) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        onDragStart={(event) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        x={50}\r\n                        y={100}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n            {/* {end of top konva} */}\r\n\r\n            {type === \"bottom\" &&\r\n              konvasquares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                //4 - 140\r\n                //3 - 105\r\n                //2 - 70\r\n                let lineRenderArr = [];\r\n                let numberRenderArr = [];\r\n\r\n                arrayUsed.forEach((square) => {\r\n                  let opt4Amount = +square.opt4.amount;\r\n                  let opt3Amount = +square.opt3.amount;\r\n                  let opt2Amount = +square.opt2.amount;\r\n                  let squareLines = [];\r\n                  let renderedNumbers = [];\r\n\r\n                  while (opt4Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 110\r\n                      );\r\n                    } else {\r\n                      squareLines.push(110);\r\n                    }\r\n                    renderedNumbers.push(4);\r\n                    opt4Amount--;\r\n                  }\r\n                  while (opt3Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 95\r\n                      );\r\n                    } else {\r\n                      squareLines.push(95);\r\n                    }\r\n                    renderedNumbers.push(3);\r\n                    opt3Amount--;\r\n                  }\r\n                  while (opt2Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 30\r\n                      );\r\n                    } else {\r\n                      squareLines.push(30);\r\n                    }\r\n                    renderedNumbers.push(2);\r\n                    opt2Amount--;\r\n                  }\r\n                  console.log(\"lineRenderArr : \", lineRenderArr);\r\n                  lineRenderArr.push(squareLines);\r\n                  numberRenderArr.push(renderedNumbers);\r\n                });\r\n\r\n                lineRenderArr.forEach((arr) => {\r\n                  arr.pop();\r\n                });\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {/* {arrow direction } */}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-30}\r\n                          offsetY={30}\r\n                          points={[0, 45, 0, 70]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetY={-30}\r\n                          points={[30, 0, 50, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-25}\r\n                          offsetY={0}\r\n                          text={`אורך ${square[0]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          rotation={270}\r\n                          offsetX={80}\r\n                          offsetY={0}\r\n                          text={` אורך ${square[1]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n\r\n                      {/* {if arrow direction is vertical} */}\r\n\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Line\r\n                              x={square[3]}\r\n                              y={square[4]}\r\n                              draggable={true}\r\n                              points={[pos, 0, pos, 32]}\r\n                              stroke='darkgreen'\r\n                              strokeWidth='6'\r\n                              dash={[10, 10]}\r\n                            ></Line>\r\n\r\n                            {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                            lineRenderArr[index].length ? (\r\n                              <>\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos - 15\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos) + 1\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                  fill={\"black\"}\r\n                                />\r\n\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos + 50\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n\r\n                                {lineRenderArr[index].forEach((arr) =>\r\n                                  console.log(\"arr : \", arr)\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Text\r\n                                fontStyle='bold'\r\n                                textDecoration='underline'\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                offsetX={\r\n                                  arrayUsed[index].opt4.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt3.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt2.amount > 0\r\n                                    ? -pos + 50\r\n                                    : null\r\n                                }\r\n                                text={\r\n                                  \"גליל\" +\r\n                                  numberRenderArr[index][\r\n                                    lineRenderArr[index].indexOf(pos)\r\n                                  ]\r\n                                }\r\n                                fontSize={15}\r\n                              />\r\n                            )}\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            offsetX={-40}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n\r\n                      {/* {if arrow direction is horizantal} */}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Group>\r\n                              <Line\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                draggable={true}\r\n                                points={[0, pos, 32, pos]}\r\n                                stroke='darkgreen'\r\n                                strokeWidth='6'\r\n                                dash={[10, 10]}\r\n                              ></Line>\r\n                              {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                              lineRenderArr[index].length ? (\r\n                                <>\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos - 60\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos)\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos + 50\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos) + 1\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n                                </>\r\n                              ) : (\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  rotation={270}\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? pos - 70\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n                              )}\r\n                            </Group>\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            // offsetY={-40}\r\n                            offsetX={60}\r\n                            rotationDeg={270}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Rect\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          draggable={true}\r\n                          stroke={square[2]}\r\n                          strokeWidth='4'\r\n                          rotationDeg={132}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      /> */}\r\n                      {/* {if we are in konva bottom use also square for glilim} */}\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 30}\r\n                          height={length[index] * 30}\r\n                          fill='transparent'\r\n                          stroke='darkgreen'\r\n                          draggable={false}\r\n                          strokeWidth='4'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* {the original square from top} */}\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"lineRenderArr : \", lineRenderArr);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={square[3]}\r\n                        y={square[4]}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n",{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":3,"nodeType":"82","messageId":"83","endLine":8,"endColumn":8},{"ruleId":"80","severity":1,"message":"84","line":10,"column":3,"nodeType":"82","messageId":"83","endLine":10,"endColumn":7},{"ruleId":"80","severity":1,"message":"85","line":12,"column":3,"nodeType":"82","messageId":"83","endLine":12,"endColumn":6},{"ruleId":"80","severity":1,"message":"86","line":13,"column":3,"nodeType":"82","messageId":"83","endLine":13,"endColumn":6},{"ruleId":"80","severity":1,"message":"87","line":14,"column":3,"nodeType":"82","messageId":"83","endLine":14,"endColumn":7},{"ruleId":"80","severity":1,"message":"88","line":15,"column":3,"nodeType":"82","messageId":"83","endLine":15,"endColumn":6},{"ruleId":"80","severity":1,"message":"89","line":16,"column":3,"nodeType":"82","messageId":"83","endLine":16,"endColumn":14},{"ruleId":"80","severity":1,"message":"90","line":108,"column":10,"nodeType":"82","messageId":"83","endLine":108,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":124,"column":6,"nodeType":"93","endLine":124,"endColumn":15,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":130,"column":6,"nodeType":"93","endLine":130,"endColumn":34,"suggestions":"96"},{"ruleId":"80","severity":1,"message":"97","line":5,"column":3,"nodeType":"82","messageId":"83","endLine":5,"endColumn":9},{"ruleId":"80","severity":1,"message":"98","line":6,"column":3,"nodeType":"82","messageId":"83","endLine":6,"endColumn":13},{"ruleId":"80","severity":1,"message":"99","line":7,"column":3,"nodeType":"82","messageId":"83","endLine":7,"endColumn":14},{"ruleId":"80","severity":1,"message":"81","line":8,"column":3,"nodeType":"82","messageId":"83","endLine":8,"endColumn":8},{"ruleId":"80","severity":1,"message":"100","line":9,"column":3,"nodeType":"82","messageId":"83","endLine":9,"endColumn":7},{"ruleId":"80","severity":1,"message":"101","line":11,"column":3,"nodeType":"82","messageId":"83","endLine":11,"endColumn":12},{"ruleId":"80","severity":1,"message":"89","line":16,"column":3,"nodeType":"82","messageId":"83","endLine":16,"endColumn":14},{"ruleId":"80","severity":1,"message":"102","line":18,"column":21,"nodeType":"82","messageId":"83","endLine":18,"endColumn":36},{"ruleId":"91","severity":1,"message":"103","line":49,"column":6,"nodeType":"93","endLine":49,"endColumn":11,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":57,"column":36,"nodeType":"107","messageId":"108","endLine":57,"endColumn":37},{"ruleId":"109","severity":1,"message":"110","line":2,"column":43,"nodeType":"111","messageId":"112","endLine":2,"endColumn":45},{"ruleId":"109","severity":1,"message":"110","line":5,"column":43,"nodeType":"111","messageId":"112","endLine":5,"endColumn":45},{"ruleId":"109","severity":1,"message":"110","line":10,"column":56,"nodeType":"111","messageId":"112","endLine":10,"endColumn":58},{"ruleId":"109","severity":1,"message":"110","line":15,"column":56,"nodeType":"111","messageId":"112","endLine":15,"endColumn":58},{"ruleId":"91","severity":1,"message":"113","line":37,"column":6,"nodeType":"93","endLine":37,"endColumn":14,"suggestions":"114"},{"ruleId":"80","severity":1,"message":"115","line":39,"column":12,"nodeType":"82","messageId":"83","endLine":39,"endColumn":20},{"ruleId":"116","severity":1,"message":"117","line":555,"column":27,"nodeType":"118","endLine":555,"endColumn":44},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'CardColumns' is defined but never used.","'titleColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection', 'bestMinChiburWithDirection', and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["122"],"'Button' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'useLayoutEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', and 'resultPchatWithDirection'. Either include them or remove the dependency array. If 'setArratUsed' needs the current value of 'resultForClientPchat', you can also switch to useReducer instead of useState and read 'resultForClientPchat' in the reducer.",["123"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'arrayUsed', 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', 'resultPchatWithDirection', 'xDirectionSquare', and 'yDirectionSquare'. Either include them or remove the dependency array. If 'setarrayUsed' needs the current value of 'resultMinChiburWithDirection', you can also switch to useReducer instead of useState and read 'resultMinChiburWithDirection' in the reducer.",["124"],"'testFunc' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"133","text":"134"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"135","text":"136"},"Update the dependencies array to be: [key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",{"range":"137","text":"138"},"Update the dependencies array to be: [arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",{"range":"139","text":"140"},[3551,3560],"[bestResult, squares, summary]",[3697,3725],"[bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",[1339,1344],"[key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",[1170,1178],"[arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]"]
=======
[{"C:\\fullstack\\desha-sintetyi\\src\\index.js":"1","C:\\fullstack\\desha-sintetyi\\src\\App.js":"2","C:\\fullstack\\desha-sintetyi\\src\\reportWebVitals.js":"3","C:\\fullstack\\desha-sintetyi\\src\\pages\\Home.js":"4","C:\\fullstack\\desha-sintetyi\\src\\PchatWithDirection.js":"5","C:\\fullstack\\desha-sintetyi\\src\\chiburCalc.js":"6","C:\\fullstack\\desha-sintetyi\\src\\minChiburNoDirection.js":"7","C:\\fullstack\\desha-sintetyi\\src\\components\\Konva.js":"8","C:\\fullstack\\desha-sintetyi\\src\\minChiburWithDirection.js":"9","C:\\fullstack\\desha-sintetyi\\src\\components\\ControlledTabs.js":"10"},{"size":517,"mtime":1611164498260,"results":"11","hashOfConfig":"12"},{"size":382,"mtime":1611164498256,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1611164498262,"results":"14","hashOfConfig":"12"},{"size":17148,"mtime":1611746857754,"results":"15","hashOfConfig":"12"},{"size":774,"mtime":1611164498257,"results":"16","hashOfConfig":"12"},{"size":3290,"mtime":1611164498258,"results":"17","hashOfConfig":"12"},{"size":699,"mtime":1611164498260,"results":"18","hashOfConfig":"12"},{"size":25114,"mtime":1611743422291,"results":"19","hashOfConfig":"12"},{"size":718,"mtime":1611164498261,"results":"20","hashOfConfig":"12"},{"size":24971,"mtime":1611747325844,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ud67y3",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\fullstack\\desha-sintetyi\\src\\index.js",[],"C:\\fullstack\\desha-sintetyi\\src\\App.js",[],"C:\\fullstack\\desha-sintetyi\\src\\reportWebVitals.js",[],"C:\\fullstack\\desha-sintetyi\\src\\pages\\Home.js",["44","45","46","47","48","49","50","51","52","53"],"C:\\fullstack\\desha-sintetyi\\src\\PchatWithDirection.js",["54","55","56","57"],"C:\\fullstack\\desha-sintetyi\\src\\chiburCalc.js",[],"C:\\fullstack\\desha-sintetyi\\src\\minChiburNoDirection.js",[],"C:\\fullstack\\desha-sintetyi\\src\\components\\Konva.js",["58","59","60"],"import React, { useEffect, useState } from \"react\";\r\nimport { Stage, Layer, Rect, Text, Group, Arrow, Line } from \"react-konva\";\r\n\r\nconst Konva = ({\r\n  squares,\r\n  setsquares,\r\n  type,\r\n  tabKey,\r\n  summary,\r\n  xDirectionSquare,\r\n  yDirectionSquare,\r\n  resultForClientPchat,\r\n  resultPchatWithDirection,\r\n  resultMinChiburWithDirection,\r\n  resultMinChiburNoDirection,\r\n}) => {\r\n  const [arrayUsed, setarrayUsed] = useState([]);\r\n  const [konvasquares, setkonvasquares] = useState(squares);\r\n  const [isDragging, setisDragging] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (tabKey === \"מינימום חיבורים + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultMinChiburWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום פחת\") {\r\n      setarrayUsed(resultForClientPchat);\r\n    }\r\n    if (tabKey === \"מינימום פחת + כיוון סיב אחיד בין הגלילים\") {\r\n      setarrayUsed(resultPchatWithDirection);\r\n    }\r\n    if (tabKey === \"מינימום חיבורים\") {\r\n      setarrayUsed(resultMinChiburNoDirection);\r\n    }\r\n    console.log(\"xDirectionSquare : \", xDirectionSquare);\r\n    console.log(\"yDirectionSquare : \", yDirectionSquare);\r\n    console.log(\"arrayUsed : \", arrayUsed);\r\n  }, [tabKey]);\r\n\r\n  function testFunc(e) {\r\n    console.log(e.target);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginTop: 30, overflowX: \"hidden\" }}>\r\n        <Stage\r\n          style={{\r\n            border: \"1px solid #333\",\r\n            marginLeft: \"5rem\",\r\n            marginRight: \"5rem\",\r\n            borderRadius: \"5px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n        >\r\n          <Layer>\r\n            {type === \"top\" &&\r\n              squares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group\r\n                      onDragEnd={(e) => {\r\n                        console.log(e.target.absolutePosition());\r\n                        console.log(e.target);\r\n                        console.log(\"squares : \", squares);\r\n                        let squaresOriginal = [...squares];\r\n                        squaresOriginal[\r\n                          index\r\n                        ][3] = e.target.absolutePosition().x;\r\n                        squaresOriginal[\r\n                          index\r\n                        ][4] = e.target.absolutePosition().y;\r\n                        setkonvasquares(squaresOriginal);\r\n                      }}\r\n                      draggable\r\n                    >\r\n                      <Text\r\n                        offsetX={-70}\r\n                        offsetY={-100}\r\n                        text={` ${square[0]} רוחב`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        rotation={270}\r\n                        offsetX={170}\r\n                        offsetY={-50}\r\n                        text={` ${square[1]} אורך`}\r\n                        fontSize={15}\r\n                      />\r\n\r\n                      <Rect\r\n                        onClick={() => {\r\n                          console.log(isDragging);\r\n                        }}\r\n                        onDragMove={(e) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        onDragStart={(event) => {\r\n                          setisDragging(true);\r\n                        }}\r\n                        x={50}\r\n                        y={100}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n\r\n            {/* {end of top konva} */}\r\n\r\n            {type === \"bottom\" &&\r\n              konvasquares.map((square, index) => {\r\n                let width = [];\r\n                let length = [];\r\n                let arrowDirection = [];\r\n\r\n                //4 - 140\r\n                //3 - 105\r\n                //2 - 70\r\n                let lineRenderArr = [];\r\n                let numberRenderArr = [];\r\n\r\n                arrayUsed.forEach((square) => {\r\n                  let opt4Amount = +square.opt4.amount;\r\n                  let opt3Amount = +square.opt3.amount;\r\n                  let opt2Amount = +square.opt2.amount;\r\n                  let squareLines = [];\r\n                  let renderedNumbers = [];\r\n\r\n                  while (opt4Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 110\r\n                      );\r\n                    } else {\r\n                      squareLines.push(110);\r\n                    }\r\n                    renderedNumbers.push(4);\r\n                    opt4Amount--;\r\n                  }\r\n                  while (opt3Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 95\r\n                      );\r\n                    } else {\r\n                      squareLines.push(95);\r\n                    }\r\n                    renderedNumbers.push(3);\r\n                    opt3Amount--;\r\n                  }\r\n                  while (opt2Amount > 0) {\r\n                    if (squareLines.length > 0) {\r\n                      squareLines.push(\r\n                        +squareLines[squareLines.length - 1] + 30\r\n                      );\r\n                    } else {\r\n                      squareLines.push(30);\r\n                    }\r\n                    renderedNumbers.push(2);\r\n                    opt2Amount--;\r\n                  }\r\n                  console.log(\"lineRenderArr : \", lineRenderArr);\r\n                  lineRenderArr.push(squareLines);\r\n                  numberRenderArr.push(renderedNumbers);\r\n                });\r\n\r\n                lineRenderArr.forEach((arr) => {\r\n                  arr.pop();\r\n                });\r\n\r\n                if (arrayUsed.length !== 0) {\r\n                  if (\r\n                    arrayUsed[index].opt2.length === square[1] ||\r\n                    arrayUsed[index].opt3.length === square[1] ||\r\n                    arrayUsed[index].opt4.length === square[1]\r\n                  ) {\r\n                    width[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    length[index] = square[1];\r\n                    arrowDirection[index] = \"vertical\";\r\n                  } else if (\r\n                    arrayUsed[index].opt2.length === square[0] ||\r\n                    arrayUsed[index].opt3.length === square[0] ||\r\n                    arrayUsed[index].opt4.length === square[0]\r\n                  ) {\r\n                    width[index] = square[0];\r\n                    length[index] =\r\n                      arrayUsed[index].opt2.amount * 2 +\r\n                      arrayUsed[index].opt3.amount * 3 +\r\n                      arrayUsed[index].opt4.amount * 4;\r\n                    arrowDirection[index] = \"horizantal\";\r\n                  }\r\n                }\r\n\r\n                return (\r\n                  <>\r\n                    <Group draggable>\r\n                      {/* {arrow direction } */}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-30}\r\n                          offsetY={30}\r\n                          points={[0, 45, 0, 70]}\r\n                          width={30}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Arrow\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetY={-30}\r\n                          points={[30, 0, 50, 0]}\r\n                          pointerLength={5}\r\n                          pointerWidth={5}\r\n                          stroke='darkgreen'\r\n                          fill='darkgreen'\r\n                        />\r\n                      )}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          offsetX={-25}\r\n                          offsetY={0}\r\n                          text={`אורך ${square[0]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n                      {arrowDirection[index] === \"vertical\" && (\r\n                        <Text\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          rotation={270}\r\n                          offsetX={80}\r\n                          offsetY={0}\r\n                          text={` אורך ${square[1]} `}\r\n                          fontSize={15}\r\n                        />\r\n                      )}\r\n\r\n                      {/* {if arrow direction is vertical} */}\r\n\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Line\r\n                              x={square[3]}\r\n                              y={square[4]}\r\n                              draggable={true}\r\n                              points={[pos, 0, pos, 32]}\r\n                              stroke='darkgreen'\r\n                              strokeWidth='6'\r\n                              dash={[10, 10]}\r\n                            ></Line>\r\n\r\n                            {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                            lineRenderArr[index].length ? (\r\n                              <>\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos - 15\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos - 15\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos) + 1\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                  fill={\"black\"}\r\n                                />\r\n\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? -pos + 50\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? -pos + 50\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n\r\n                                {lineRenderArr[index].forEach((arr) =>\r\n                                  console.log(\"arr : \", arr)\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <Text\r\n                                fontStyle='bold'\r\n                                textDecoration='underline'\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                offsetX={\r\n                                  arrayUsed[index].opt4.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt3.amount > 0\r\n                                    ? -pos + 50\r\n                                    : arrayUsed[index].opt2.amount > 0\r\n                                    ? -pos + 50\r\n                                    : null\r\n                                }\r\n                                text={\r\n                                  \"גליל\" +\r\n                                  numberRenderArr[index][\r\n                                    lineRenderArr[index].indexOf(pos)\r\n                                  ]\r\n                                }\r\n                                fontSize={15}\r\n                              />\r\n                            )}\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"vertical\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            offsetX={-40}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n\r\n                      {/* {if arrow direction is horizantal} */}\r\n\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr.length !== 0 &&\r\n                        lineRenderArr[index].map((pos) => (\r\n                          <>\r\n                            <Group>\r\n                              <Line\r\n                                x={square[3]}\r\n                                y={square[4]}\r\n                                draggable={true}\r\n                                points={[0, pos, 32, pos]}\r\n                                stroke='darkgreen'\r\n                                strokeWidth='6'\r\n                                dash={[10, 10]}\r\n                              ></Line>\r\n                              {lineRenderArr[index].indexOf(pos) + 1 ===\r\n                              lineRenderArr[index].length ? (\r\n                                <>\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos - 60\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos - 60\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos)\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n\r\n                                  <Text\r\n                                    fontStyle='bold'\r\n                                    textDecoration='underline'\r\n                                    rotation={270}\r\n                                    x={square[3]}\r\n                                    y={square[4]}\r\n                                    offsetX={\r\n                                      arrayUsed[index].opt4.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt3.amount > 0\r\n                                        ? pos + 50\r\n                                        : arrayUsed[index].opt2.amount > 0\r\n                                        ? pos + 50\r\n                                        : null\r\n                                    }\r\n                                    text={\r\n                                      \"גליל\" +\r\n                                      numberRenderArr[index][\r\n                                        lineRenderArr[index].indexOf(pos) + 1\r\n                                      ]\r\n                                    }\r\n                                    fontSize={15}\r\n                                  />\r\n                                </>\r\n                              ) : (\r\n                                <Text\r\n                                  fontStyle='bold'\r\n                                  textDecoration='underline'\r\n                                  rotation={270}\r\n                                  x={square[3]}\r\n                                  y={square[4]}\r\n                                  offsetX={\r\n                                    arrayUsed[index].opt4.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt3.amount > 0\r\n                                      ? pos - 70\r\n                                      : arrayUsed[index].opt2.amount > 0\r\n                                      ? pos - 70\r\n                                      : null\r\n                                  }\r\n                                  text={\r\n                                    \"גליל\" +\r\n                                    numberRenderArr[index][\r\n                                      lineRenderArr[index].indexOf(pos)\r\n                                    ]\r\n                                  }\r\n                                  fontSize={15}\r\n                                />\r\n                              )}\r\n                            </Group>\r\n                          </>\r\n                        ))}\r\n                      {arrowDirection[index] === \"horizantal\" &&\r\n                        lineRenderArr[index].length === 0 && (\r\n                          <Text\r\n                            fontStyle='bold'\r\n                            textDecoration='underline'\r\n                            x={square[3]}\r\n                            y={square[4]}\r\n                            // offsetY={-40}\r\n                            offsetX={60}\r\n                            rotationDeg={270}\r\n                            text={\r\n                              arrayUsed[index].opt4.amount > 0\r\n                                ? \"גליל 4  \"\r\n                                : arrayUsed[index].opt3.amount > 0\r\n                                ? \"גליל 3\"\r\n                                : arrayUsed[index].opt2.amount > 0\r\n                                ? \"גליל 2\"\r\n                                : null\r\n                            }\r\n                            fontSize={15}\r\n                          />\r\n                        )}\r\n                      {arrowDirection[index] === \"horizantal\" && (\r\n                        <Rect\r\n                          x={square[3] + 60}\r\n                          y={square[4] - 75}\r\n                          draggable={true}\r\n                          stroke={square[2]}\r\n                          strokeWidth='4'\r\n                          rotationDeg={132}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[0]} ר`}\r\n                        fontSize={15}\r\n                      />\r\n                      <Text\r\n                        x={square[3]}\r\n                        y={square[4] + 100}\r\n                        text={` ${square[1]} א`}\r\n                        fontSize={15}\r\n                        rotationDeg={270}\r\n                      /> */}\r\n                      {/* {if we are in konva bottom use also square for glilim} */}\r\n\r\n                      {type === \"bottom\" && (\r\n                        <Rect\r\n                          draggable\r\n                          x={square[3]}\r\n                          y={square[4]}\r\n                          width={width[index] * 30}\r\n                          height={length[index] * 30}\r\n                          fill='transparent'\r\n                          stroke='darkgreen'\r\n                          draggable={false}\r\n                          strokeWidth='4'\r\n                          dash={[10, 10]}\r\n                        ></Rect>\r\n                      )}\r\n\r\n                      {/* {the original square from top} */}\r\n\r\n                      <Rect\r\n                        onClick={(e) => {\r\n                          console.log(e.target.absolutePosition());\r\n                          console.log(e.target);\r\n                          console.log(\"lineRenderArr : \", lineRenderArr);\r\n                          console.log(\"squares : \", squares);\r\n                          let squaresOriginal = [...squares];\r\n                          squaresOriginal[\r\n                            index\r\n                          ][3] = e.target.absolutePosition().x;\r\n                          squaresOriginal[\r\n                            index\r\n                          ][4] = e.target.absolutePosition().y;\r\n                          setkonvasquares(squaresOriginal);\r\n                        }}\r\n                        x={square[3]}\r\n                        y={square[4]}\r\n                        width={square[0] * 30}\r\n                        height={square[1] * 30}\r\n                        fill={square[2]}\r\n                        opacity={0.6}\r\n                      />\r\n                    </Group>\r\n                  </>\r\n                );\r\n              })}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Konva;\r\n",["61","62"],"C:\\fullstack\\desha-sintetyi\\src\\minChiburWithDirection.js",[],"C:\\fullstack\\desha-sintetyi\\src\\components\\ControlledTabs.js",["63","64","65","66","67","68","69","70","71"],{"ruleId":"72","severity":1,"message":"73","line":8,"column":3,"nodeType":"74","messageId":"75","endLine":8,"endColumn":8},{"ruleId":"72","severity":1,"message":"76","line":10,"column":3,"nodeType":"74","messageId":"75","endLine":10,"endColumn":7},{"ruleId":"72","severity":1,"message":"77","line":12,"column":3,"nodeType":"74","messageId":"75","endLine":12,"endColumn":6},{"ruleId":"72","severity":1,"message":"78","line":13,"column":3,"nodeType":"74","messageId":"75","endLine":13,"endColumn":6},{"ruleId":"72","severity":1,"message":"79","line":14,"column":3,"nodeType":"74","messageId":"75","endLine":14,"endColumn":7},{"ruleId":"72","severity":1,"message":"80","line":15,"column":3,"nodeType":"74","messageId":"75","endLine":15,"endColumn":6},{"ruleId":"72","severity":1,"message":"81","line":16,"column":3,"nodeType":"74","messageId":"75","endLine":16,"endColumn":14},{"ruleId":"72","severity":1,"message":"82","line":108,"column":10,"nodeType":"74","messageId":"75","endLine":108,"endColumn":20},{"ruleId":"83","severity":1,"message":"84","line":124,"column":6,"nodeType":"85","endLine":124,"endColumn":15,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":130,"column":6,"nodeType":"85","endLine":130,"endColumn":34,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":43,"nodeType":"91","messageId":"92","endLine":2,"endColumn":45},{"ruleId":"89","severity":1,"message":"90","line":5,"column":43,"nodeType":"91","messageId":"92","endLine":5,"endColumn":45},{"ruleId":"89","severity":1,"message":"90","line":10,"column":56,"nodeType":"91","messageId":"92","endLine":10,"endColumn":58},{"ruleId":"89","severity":1,"message":"90","line":15,"column":56,"nodeType":"91","messageId":"92","endLine":15,"endColumn":58},{"ruleId":"83","severity":1,"message":"93","line":37,"column":6,"nodeType":"85","endLine":37,"endColumn":14,"suggestions":"94"},{"ruleId":"72","severity":1,"message":"95","line":39,"column":12,"nodeType":"74","messageId":"75","endLine":39,"endColumn":20},{"ruleId":"96","severity":1,"message":"97","line":555,"column":27,"nodeType":"98","endLine":555,"endColumn":44},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"72","severity":1,"message":"103","line":6,"column":3,"nodeType":"74","messageId":"75","endLine":6,"endColumn":13},{"ruleId":"72","severity":1,"message":"104","line":7,"column":3,"nodeType":"74","messageId":"75","endLine":7,"endColumn":14},{"ruleId":"72","severity":1,"message":"73","line":8,"column":3,"nodeType":"74","messageId":"75","endLine":8,"endColumn":8},{"ruleId":"72","severity":1,"message":"105","line":9,"column":3,"nodeType":"74","messageId":"75","endLine":9,"endColumn":7},{"ruleId":"72","severity":1,"message":"106","line":11,"column":3,"nodeType":"74","messageId":"75","endLine":11,"endColumn":12},{"ruleId":"72","severity":1,"message":"81","line":16,"column":3,"nodeType":"74","messageId":"75","endLine":16,"endColumn":14},{"ruleId":"72","severity":1,"message":"107","line":18,"column":21,"nodeType":"74","messageId":"75","endLine":18,"endColumn":36},{"ruleId":"83","severity":1,"message":"108","line":51,"column":6,"nodeType":"85","endLine":51,"endColumn":11,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":62,"column":36,"nodeType":"112","messageId":"113","endLine":62,"endColumn":37},"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","'CardColumns' is defined but never used.","'titleColor' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'bestResult' and 'summary'. Either include them or remove the dependency array.","ArrayExpression",["114"],"React Hook useEffect has missing dependencies: 'bestMinChiburNoDirection', 'bestMinChiburWithDirection', and 'bestResultPchatWithDirection'. Either include them or remove the dependency array.",["115"],"array-callback-return","Array.prototype.reduce() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'arrayUsed', 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', 'resultPchatWithDirection', 'xDirectionSquare', and 'yDirectionSquare'. Either include them or remove the dependency array. If 'setarrayUsed' needs the current value of 'resultMinChiburWithDirection', you can also switch to useReducer instead of useState and read 'resultMinChiburWithDirection' in the reducer.",["116"],"'testFunc' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["117"],"no-negated-in-lhs",["118"],"'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'Form' is defined but never used.","'Container' is defined but never used.","'useLayoutEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'resultForClientPchat', 'resultMinChiburNoDirection', 'resultMinChiburWithDirection', and 'resultPchatWithDirection'. Either include them or remove the dependency array. If 'setArratUsed' needs the current value of 'resultForClientPchat', you can also switch to useReducer instead of useState and read 'resultForClientPchat' in the reducer.",["119"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},"Update the dependencies array to be: [bestResult, squares, summary]",{"range":"128","text":"129"},"Update the dependencies array to be: [bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",{"range":"130","text":"131"},"Update the dependencies array to be: [arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",{"range":"132","text":"133"},"Update the dependencies array to be: [key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]",{"range":"134","text":"135"},[3551,3560],"[bestResult, squares, summary]",[3697,3725],"[bestMinChiburNoDirection, bestMinChiburWithDirection, bestResultPchatWithDirection, x_directionResultForClient]",[1170,1178],"[arrayUsed, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection, tabKey, xDirectionSquare, yDirectionSquare]",[1422,1427],"[key, resultForClientPchat, resultMinChiburNoDirection, resultMinChiburWithDirection, resultPchatWithDirection]"]
>>>>>>> 0f33b3df0a3a96e914789b44affba12ee5349da2
